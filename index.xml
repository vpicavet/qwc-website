<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>QWC2 / QWC Services on QWC2 Documentation</title><link>https://qwc.sourcepole.com/</link><description>Recent content in QWC2 / QWC Services on QWC2 Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Sep 2021 15:11:57 +0200</lastBuildDate><atom:link href="https://qwc.sourcepole.com/index.xml" rel="self" type="application/rss+xml"/><item><title>DB Authentication Service</title><link>https://qwc.sourcepole.com/authentication/qwc-db-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/authentication/qwc-db-auth/</guid><description>Authentication service with local user database.
Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
DB Auth Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/dbAuthConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;db-auth&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;db_url&amp;#34;: &amp;#34;postgresql:///?service=qwc_configdb&amp;#34; } } Set the MAX_LOGIN_ATTEMPTS environment variable to set the maximum number of failed login attempts before sign in is blocked (default: 20).</description></item><item><title>QWC Map Viewer Service</title><link>https://qwc.sourcepole.com/services/qwc-map-viewer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-map-viewer/</guid><description>Provide a QWC2 Web Client application using QWC services.
Note: Requires a QWC OGC service or QGIS server running on ogc_service_url. Additional QWC Services are optional.
Setup Copy your QWC2 files from a production build (see QWC2 Quick start):
SRCDIR=path/to/qwc2-app/prod/ DSTDIR=$PWD mkdir $DSTDIR/qwc2 &amp;amp;&amp;amp; mkdir $DSTDIR/qwc2/dist cd $SRCDIR &amp;amp;&amp;amp; \ cp -r assets $DSTDIR/qwc2 &amp;amp;&amp;amp; \ cp -r translations $DSTDIR/qwc2/translations &amp;amp;&amp;amp; \ cp dist/QWC2App.js $DSTDIR/qwc2/dist/ &amp;amp;&amp;amp; \ cp index.html $DSTDIR/qwc2/ &amp;amp;&amp;amp; \ cp config.</description></item><item><title>LDAP Authentication Service</title><link>https://qwc.sourcepole.com/authentication/qwc-ldap-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/authentication/qwc-ldap-auth/</guid><description>Authentication with LDAP/Active Directory
Configuration See also flask-ldap3-login
ENV default value description JWT_SECRET_KEY ******** secret key for JWT token (same for all services) LDAP_HOST localhost Hostname of your LDAP Server LDAP_PORT 389 The port number of your LDAP server. LDAP_USE_SSL False Set to True if your server uses SSL LDAP_BASE_DN dc=example,dc=org Base DN of your directory LDAP_USER_DN ou=users Users DN to be prepended to the Base DN LDAP_GROUP_DN ou=groups Groups DN to be prepended to the Base DN LDAP_SEARCH_FOR_GROUPS False Search for groups LDAP_GROUP_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific group LDAP_USER_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific user LDAP_USER_RDN_ATTR cn The RDN attribute for your user schema on LDAP LDAP_USER_LOGIN_ATTR cn The Attribute you want users to authenticate to LDAP with LDAP_BIND_USER_DN None The Username to bind to LDAP with LDAP_BIND_USER_PASSWORD None The Password to bind to LDAP with Usage Run standalone application:</description></item><item><title>QWC OGC Service</title><link>https://qwc.sourcepole.com/services/qwc-ogc-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-ogc-service/</guid><description>Provide OGC services with permission filters as a proxy to a QGIS server.
Note: requires a QGIS server running on default_qgis_server_url.
Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
Data Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/ogcConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/v2/schemas/qwc-ogc-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;ogc&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;default_qgis_server_url&amp;#34;: &amp;#34;http://localhost:8001/ows/&amp;#34; }, &amp;#34;resources&amp;#34;: { &amp;#34;wms_services&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;qwc_demo&amp;#34;, &amp;#34;wms_url&amp;#34;: &amp;#34;http://localhost:8001/ows/qwc_demo&amp;#34;, &amp;#34;online_resources&amp;#34;: { &amp;#34;service&amp;#34;: &amp;#34;http://localhost:5013/qwc_demo&amp;#34;, &amp;#34;feature_info&amp;#34;: &amp;#34;http://localhost:5013/qwc_demo&amp;#34;, &amp;#34;legend&amp;#34;: &amp;#34;http://localhost:5013/qwc_demo&amp;#34; }, &amp;#34;root_layer&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;qwc_demo&amp;#34;, &amp;#34;layers&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;edit_demo&amp;#34;, &amp;#34;layers&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;edit_points&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Edit Points&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;num&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;amount&amp;#34;, &amp;#34;validated&amp;#34;, &amp;#34;datetime&amp;#34;, &amp;#34;geometry&amp;#34;, &amp;#34;maptip&amp;#34; ], &amp;#34;queryable&amp;#34;: true }, { &amp;#34;name&amp;#34;: &amp;#34;edit_lines&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Edit Lines&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;num&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;amount&amp;#34;, &amp;#34;validated&amp;#34;, &amp;#34;datetime&amp;#34;, &amp;#34;geometry&amp;#34;, &amp;#34;maptip&amp;#34; ], &amp;#34;queryable&amp;#34;: true }, { &amp;#34;name&amp;#34;: &amp;#34;edit_polygons&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Edit Polygons&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;num&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;amount&amp;#34;, &amp;#34;validated&amp;#34;, &amp;#34;datetime&amp;#34;, &amp;#34;geometry&amp;#34;, &amp;#34;maptip&amp;#34; ], &amp;#34;queryable&amp;#34;: true } ] }, { &amp;#34;name&amp;#34;: &amp;#34;geographic_lines&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;country_names&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;states_provinces&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;countries&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Countries&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;name&amp;#34;, &amp;#34;formal_en&amp;#34;, &amp;#34;pop_est&amp;#34;, &amp;#34;subregion&amp;#34;, &amp;#34;geometry&amp;#34; ], &amp;#34;queryable&amp;#34;: true } ] }, &amp;#34;print_url&amp;#34;: &amp;#34;http://localhost:5013/qwc_demo&amp;#34;, &amp;#34;print_templates&amp;#34;: [&amp;#34;A4 Landscape&amp;#34;], &amp;#34;internal_print_layers&amp;#34;: [&amp;#34;bluemarble_bg&amp;#34;, &amp;#34;osm_bg&amp;#34;] } ], &amp;#34;wfs_services&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;qwc_demo&amp;#34;, &amp;#34;wfs_url&amp;#34;: &amp;#34;http://localhost:8001/ows/qwc_demo_wfs&amp;#34;, &amp;#34;online_resource&amp;#34;: &amp;#34;http://localhost:5013/qwc_demo&amp;#34;, &amp;#34;layers&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;edit_points&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;num&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;amount&amp;#34;, &amp;#34;validated&amp;#34;, &amp;#34;datetime&amp;#34;, &amp;#34;geometry&amp;#34; ] }, { &amp;#34;name&amp;#34;: &amp;#34;edit_lines&amp;#34;, &amp;#34;attributes&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;num&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;amount&amp;#34;, &amp;#34;validated&amp;#34;, &amp;#34;datetime&amp;#34;, &amp;#34;geometry&amp;#34; ] } ] } ] } } Note: wfs_services example for a separate QGIS project qwc_demo_wfs with WFS enabled.</description></item><item><title>QWC FeatureInfo Service</title><link>https://qwc.sourcepole.com/services/qwc-feature-info-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-feature-info-service/</guid><description>Query layers at a geographic position using an API based on WMS GetFeatureInfo.
The query is handled for each layer by its layer info provider configured in the config file.
Layer info providers:
WMS GetFeatureInfo (default): forward info request to the QGIS Server DB Query: execute custom query SQL Custom info module: custom Python modules returning layer info The info results are each rendered into customizable HTML templates and returned as a GetFeatureInfoResponse XML.</description></item><item><title>QWC Fulltext Search Service</title><link>https://qwc.sourcepole.com/services/qwc-fulltext-search-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-fulltext-search-service/</guid><description>Faceted fulltext search and geometry retrieval for search results.
Dependencies Solr search service Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
Search Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/searchConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;search&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;solr_service_url&amp;#34;: &amp;#34;http://localhost:8983/solr/gdi/select&amp;#34;, &amp;#34;word_split_re&amp;#34;: &amp;#34;[\\s,.:;\&amp;#34;]+&amp;#34;, &amp;#34;search_result_limit&amp;#34;: 50, &amp;#34;db_url&amp;#34;: &amp;#34;postgresql:///?service=qwc_geodb&amp;#34; }, &amp;#34;resources&amp;#34;: { &amp;#34;facets&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;background&amp;#34;, &amp;#34;filter_word&amp;#34;: &amp;#34;Background&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;foreground&amp;#34;, &amp;#34;filter_word&amp;#34;: &amp;#34;Map&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;ne_10m_admin_0_countries&amp;#34;, &amp;#34;filter_word&amp;#34;: &amp;#34;Country&amp;#34;, &amp;#34;table_name&amp;#34;: &amp;#34;qwc_geodb.</description></item><item><title>QWC Legend Service</title><link>https://qwc.sourcepole.com/services/qwc-legend-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-legend-service/</guid><description>Acts as a proxy between the client and the OGC service for GetLegendGraphic request, allowing to return custom legend graphics instead of the ones generated by the WMS server.
Note: Requires a QGIS server running on default_qgis_server_url.
Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
Data Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/legendConfig.</description></item><item><title>QWC Permalink Service</title><link>https://qwc.sourcepole.com/services/qwc-permalink-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-permalink-service/</guid><description>Stores and resolves compact permalinks for the Web Client.
Permalinks are stored in a database table.
Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
JSON config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/permalinkConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;permalink&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;db_url&amp;#34;: &amp;#34;postgresql:///?service=qwc_configdb&amp;#34;, &amp;#34;permalinks_table&amp;#34;: &amp;#34;qwc_config.permalinks&amp;#34;, &amp;#34;user_permalink_table&amp;#34;: &amp;#34;qwc_config.user_permalinks&amp;#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.</description></item><item><title>QWC Print service</title><link>https://qwc.sourcepole.com/services/qwc-print-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-print-service/</guid><description>Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
JSON config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/printConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;print&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;ogc_service_url&amp;#34;: &amp;#34;http://localhost:5013/ows/&amp;#34;, &amp;#34;qgis_server_version&amp;#34;: &amp;#34;3.4.1&amp;#34;, &amp;#34;print_pdf_filename&amp;#34;: &amp;#34;qwc.pdf&amp;#34;, &amp;#34;label_queries&amp;#34;: [ { &amp;#34;db_url&amp;#34;: &amp;#34;postgresql:///?service=fachdaten&amp;#34;, &amp;#34;query&amp;#34;: &amp;#34;SELECT &amp;#39;Bearbeiter/in: &amp;#39; || vorname || &amp;#39; &amp;#39; || nachname FROM benutzer WHERE username = $username$&amp;#34;, &amp;#34;params&amp;#34;: [ &amp;#34;NAME&amp;#34; ] } ] }, &amp;#34;resources&amp;#34;: { &amp;#34;print_templates&amp;#34;: [ { &amp;#34;template&amp;#34;: &amp;#34;A4 hoch&amp;#34; } ] } } label_queries is a configuration for additional query parameters to inject into the WMS GetPrint request.</description></item><item><title>QWC MapInfo Service</title><link>https://qwc.sourcepole.com/services/qwc-mapinfo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-mapinfo-service/</guid><description>Additional information at a geographic position displayed with right mouse click on map.
Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
MapInfo Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/mapinfoConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;mapinfo&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;db_url&amp;#34;: &amp;#34;postgresql:///?service=qwc_geodb&amp;#34;, &amp;#34;info_table&amp;#34;: &amp;#34;qwc_geodb.ne_10m_admin_0_countries&amp;#34;, &amp;#34;info_geom_col&amp;#34;: &amp;#34;wkb_geometry&amp;#34;, &amp;#34;info_display_col&amp;#34;: &amp;#34;name&amp;#34;, &amp;#34;info_title&amp;#34;: &amp;#34;Country&amp;#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.</description></item><item><title>QWC Data Service</title><link>https://qwc.sourcepole.com/services/qwc-data-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-data-service/</guid><description>Edit spatial and unlocated features of datasets via GeoJSON.
Note: requires a PostGIS database for reading and writing features
Setup Uses PostgreSQL connection service or connection to a PostGIS database. This connection&amp;rsquo;s user requires read and write access to the configured tables.
qwc_demo example Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service_write requires read and write access to the configured tables of the data layers from the QGIS project qwc_demo.</description></item><item><title>Document service</title><link>https://qwc.sourcepole.com/services/qwc-document-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-document-service/</guid><description>The document service delivers reports from the Jasper reporting service with permission control.
Dependencies Jasper reporting service Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
JSON config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/documentConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;jasper_service_url&amp;#34;: &amp;#34;http://localhost:8002/reports&amp;#34;, &amp;#34;jasper_timeout&amp;#34;: 60 }, &amp;#34;resources&amp;#34;: { &amp;#34;document_templates&amp;#34;: [ { &amp;#34;template&amp;#34;: &amp;#34;demo&amp;#34;, &amp;#34;report_filename&amp;#34;: &amp;#34;PieChartReport&amp;#34; } ] } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.</description></item><item><title>QWC Elevation Service</title><link>https://qwc.sourcepole.com/services/qwc-elevation-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-elevation-service/</guid><description>Returns elevations.
Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
Elevation Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/elevationConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;elevation&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;elevation_dataset&amp;#34;: &amp;#34;/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif&amp;#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.
Variable Description ELEVATION_DATASET path/to/dtm.</description></item><item><title>QWC Admin GUI</title><link>https://qwc.sourcepole.com/services/qwc-admin-gui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-admin-gui/</guid><description>GUI for administration of QWC Services.
manage users, groups and roles define QWC resources and assign permissions define registrable groups and manage group registration requests Note: requires a QWC ConfigDB
Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.
Admin Gui Service config JSON schema File location: $CONFIG_PATH/&amp;lt;tenant&amp;gt;/adminGuiConfig.json Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://raw.</description></item><item><title>Registration GUI</title><link>https://qwc.sourcepole.com/services/qwc-registration-gui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-registration-gui/</guid><description>Provides an application form, so users can submit group membership requests.
These membership requests can then be approved or declined by an admin user in the QWC configuration backend.
Setup Uses PostgreSQL connection service qwc_configdb (ConfigDB).
Setup PostgreSQL connection service file pg_service.conf:
host=localhost port=5439 dbname=qwc_demo user=qwc_admin password=qwc_admin sslmode=disable Place this file in your home directory, or set the PGSERVICEFILE environment variable to point to the file.
Configuration Mailer Set the ADMIN_RECIPIENTS environment variable to a comma separated list of admin users who should be notified of new registration requests (default: None).</description></item><item><title>QWC Config Generator</title><link>https://qwc.sourcepole.com/services/qwc-config-generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwc.sourcepole.com/services/qwc-config-generator/</guid><description>Generate JSON files for service configs and permissions from WMS GetCapabilities, QGS projects and QWC ConfigDB.
Setup Create a ConfigGenerator config file tenantConfig.json for each tenant (see below).
Configuration Example tenantConfig.json:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json&amp;#34;, &amp;#34;service&amp;#34;: &amp;#34;config-generator&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;tenant&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;config_db_url&amp;#34;: &amp;#34;postgresql:///?service=qwc_configdb&amp;#34;, &amp;#34;default_qgis_server_url&amp;#34;: &amp;#34;http://localhost:8001/ows/&amp;#34;, &amp;#34;qgis_projects_base_dir&amp;#34;: &amp;#34;/data&amp;#34;, &amp;#34;permissions_default_allow&amp;#34;: true }, &amp;#34;themesConfig&amp;#34;: { &amp;#34;defaultScales&amp;#34;: [100000000, 50000000, 25000000, 10000000, 4000000, 2000000, 1000000, 400000, 200000, 80000, 40000, 20000, 10000, 8000, 6000, 4000, 2000, 1000, 500, 250, 100], &amp;#34;defaultPrintGrid&amp;#34;: [{&amp;#34;s&amp;#34;: 10000000, &amp;#34;x&amp;#34;: 1000000, &amp;#34;y&amp;#34;: 1000000}, {&amp;#34;s&amp;#34;: 1000000, &amp;#34;x&amp;#34;: 100000, &amp;#34;y&amp;#34;: 100000}, {&amp;#34;s&amp;#34;: 100000, &amp;#34;x&amp;#34;: 10000, &amp;#34;y&amp;#34;: 10000}, {&amp;#34;s&amp;#34;: 10000, &amp;#34;x&amp;#34;: 1000, &amp;#34;y&amp;#34;: 1000}, {&amp;#34;s&amp;#34;: 1000, &amp;#34;x&amp;#34;: 100, &amp;#34;y&amp;#34;: 100}, {&amp;#34;s&amp;#34;: 100, &amp;#34;x&amp;#34;: 10, &amp;#34;y&amp;#34;: 10}], &amp;#34;defaultWMSVersion&amp;#34;:&amp;#34;1.</description></item></channel></rss>