[{"uri":"https://qwc.sourcepole.com/overview/","title":"Overview","tags":[],"description":"","content":"The QWC Services are a collection of microservices providing configurations for and authorized access to different QWC Map Viewer components.\nA QWC services SDI has the following main components:\n Auth-Service: Authentication service. Currently supported: User DB, LDAP/AD, SAML or Kerberos. Map Viewer: QWC2 Webclient with configered tools, open and protected maps. OGC Service: Frontend with access control for WMS and WFS. REST Services: Services providing an API for Search, Mapinfo, etc. QGIS Server: Server for map rendering (WMS) and WFS publication. Solr: Apache Solr fulltext search engine. Backend for geodata and metadata search. Reporting Server: Jasper Reporting server. Admin GUI: Administration UI for managing users, permissions, etc.  User- and access control managment For authentication the following services are currently provided:\n qwc-db-auth: Integrated User-DB qwc-ldap-auth: LDAP / Active Directory qwc-saml-auth: SAML 2.0 qwc-kerberos-auth: Kerberos  The config/user DB is used in all authentication methods for managing permissions.\nAfter successful identification, all authentcation services issue a JWT token which is forwarded to other services either as session cookie or via HTTP header. The JWT token contains username and roles of the authenticated user. Services requring authentication use a common library for reading the JWT content and checking the cryptographic signature.\nAuthorization is managed by each service. Services like QGIS server, which don\u0026rsquo;t have built-in permission control, are protected by frontend services like \u0026ldquo;«qwc-ogc-service\u0026rdquo;.\nGroups and roles\nDifferent permissions (e.g. read or write) for accessing resources can be granted to \u0026ldquo;roles\u0026rdquo;. Roles are associated with users or user groups. A user can be member of multiple groups and can also have multiple direct roles.\nIf an authentication service returns group information from an IDP, group permissions can be directly used, without registering individual users.\nREST API qwc-services communinicate via REST APIs, which are documented according to the OpenAPI specification.\nSearch Apache Solr (https://solr.apache.org/) is used as integrated search engine. The fulltext search engine with faceted search capabilities is available with an Apache license and is used by internet search engines like DuckDuckGo.\nSearch categories (\u0026ldquo;facets\u0026rdquo;) can be configured as globally available for maps or dependent on active layers only. An assigned \u0026ldquo;filterword\u0026rdquo; can be used as shortcut for limiting searches on a category.\nGrouping and sorting of search results is dependent on the result count per category. If many results are available, an additional section for search refining is showed in the results. There is also a history of recent searches.\nInformation query Map info queries are handled by the qwc-feature-info-service providing an WMS GetFeatureInfo API.\nThe following info query types can be configured for each layer::\n WMS feature info query (default): Forwarded to QGIS Server DB Query: Execution of a user-defined SQL query Custom Info module: Specific Python module for returning layer information  Result data of the query module is rendered with the Jinja template engine (with customizable HTML templates) and returned to the web client as GetFeatureInfoResponse.\nMeasuring tools Tools for position, distance, area and heading measurements are provided. Units are user selecteable.\nThe qwc-elevation-service returns height profiles for distance measurements. The mouse position in the height profile is marked in the map and shows a distance height measurement.\n.\nPrinting Printing layouts included in QGIS projects can be used for printing. Users can select permitted layouts in the print dialog. System provided information like print date, scale bar, coordinate systems, north arraw and scale can be used in the priint layout.\nUser editable text fields like map title or remarks can be provided as well.\n"},{"uri":"https://qwc.sourcepole.com/authentication/qwc-db-auth/","title":"DB Authentication Service","tags":[],"description":"","content":"Authentication service with local user database.\nConfiguration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nDB Auth Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/dbAuthConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-db-auth/master/schemas/qwc-db-auth.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;db-auth\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_configdb\u0026#34; } } Set the MAX_LOGIN_ATTEMPTS environment variable to set the maximum number of failed login attempts before sign in is blocked (default: 20).\nA minimum password length of 8 with no other constraints is set by default. Optional password complexity constraints can be set using the following config options:\n\u0026#34;config\u0026#34;: { \u0026#34;password_min_length\u0026#34;: 8, \u0026#34;password_max_length\u0026#34;: 128, \u0026#34;password_constraints\u0026#34;: [ \u0026#34;[A-Z]\u0026#34;, \u0026#34;[a-z]\u0026#34;, \u0026#34;\\\\d\u0026#34;, \u0026#34;[ !\\\u0026#34;#$%\u0026amp;\u0026#39;()*+,\\\\-./\\\\\\\\:;\u0026lt;=\u0026gt;?@\\\\[\\\\]^_`{|}~]\u0026#34; ], \u0026#34;password_min_constraints\u0026#34;: 3, \u0026#34;password_constraints_message\u0026#34;: \u0026#34;Password must contain at least three of these character types: uppercase letters, lowercase letters, numbers, special characters\u0026#34; } password_min_length and password_max_length can be set independently. password_constraints is a list of regular expression of which at least password_min_constraints have to match for the password to be valid, otherwise the password_constraints_message is shown. Note that the regular expression have to be JSON escaped and allow only patterns supported by Python\u0026rsquo;s re module.\nBesides the form based DB login, an (insecure) plain POST login is supported. This method can be activated by setting POST_PARAM_LOGIN=True. User and password are passed as POST parameters username and password. Usage example: curl -d 'username=demo\u0026amp;password=demo' http://localhost:5017/login.\n MAIL_SERVER: default ‘localhost’ MAIL_PORT: default 25 MAIL_USE_TLS: default False MAIL_USE_SSL: default False MAIL_DEBUG: default app.debug MAIL_USERNAME: default None MAIL_PASSWORD: default None MAIL_DEFAULT_SENDER: default None MAIL_MAX_EMAILS: default None MAIL_SUPPRESS_SEND: default app.testing MAIL_ASCII_ATTACHMENTS: default False  In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests.\nTwo factor authentication Two factor authentication using TOTP can be enabled by setting the environment variable TOTP_ENABLED=True. This will require an additional verification token after sign in, based on the user\u0026rsquo;s TOTP secret.\nA personal QR code for setting up the two factor authentication is shown to the user on first sign in (or if the TOTP secret is empty). The TOTP issuer name for your application can be set using the environment variable TOTP_ISSUER_NAME=\u0026quot;QWC Services\u0026quot;.\nAn user\u0026rsquo;s TOTP secret can be reset by clearing it in the Admin GUI user form.\nUsage Run standalone application:\npython server.py  Endpoints:\nhttp://localhost:5017/login http://localhost:5017/logout  Development Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nexport CONFIG_PATH=../qwc-docker/demo-config  Configure environment:\necho FLASK_ENV=development \u0026gt;.flaskenv export MAIL_SUPPRESS_SEND=True export MAIL_DEFAULT_SENDER=from@example.com  Start local service:\n python server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-map-viewer/","title":"QWC Map Viewer Service","tags":[],"description":"","content":"Provide a QWC2 Web Client application using QWC services.\nNote: Requires a QWC OGC service or QGIS server running on ogc_service_url. Additional QWC Services are optional.\nSetup Copy your QWC2 files from a production build (see QWC2 Quick start):\nSRCDIR=path/to/qwc2-app/prod/ DSTDIR=$PWD mkdir $DSTDIR/qwc2 \u0026amp;\u0026amp; mkdir $DSTDIR/qwc2/dist cd $SRCDIR \u0026amp;\u0026amp; \\ cp -r assets $DSTDIR/qwc2 \u0026amp;\u0026amp; \\ cp -r translations $DSTDIR/qwc2/translations \u0026amp;\u0026amp; \\ cp dist/QWC2App.js $DSTDIR/qwc2/dist/ \u0026amp;\u0026amp; \\ cp index.html $DSTDIR/qwc2/ \u0026amp;\u0026amp; \\ cp config.json $DSTDIR/qwc2/config.json \u0026amp;\u0026amp; \\ cd -  Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nNote:: Custom viewers have been replaced by tenants in v2.\nMap Viewer config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/mapViewerConfig.json  Example:\n{ \u0026quot;$schema\u0026quot;: \u0026quot;https://raw.githubusercontent.com/qwc-services/qwc-map-viewer/v2/schemas/qwc-map-viewer.json\u0026quot;, \u0026quot;service\u0026quot;: \u0026quot;map-viewer\u0026quot;, \u0026quot;config\u0026quot;: { // path to QWC2 files \u0026quot;qwc2_path\u0026quot;: \u0026quot;qwc2/\u0026quot;, // QWC OGC service (required) \u0026quot;ogc_service_url\u0026quot;: \u0026quot;http://localhost:5013/\u0026quot;, // some optional QWC services \u0026quot;auth_service_url\u0026quot;: \u0026quot;http://localhost:5017/\u0026quot;, \u0026quot;data_service_url\u0026quot;: \u0026quot;http://localhost:5012/\u0026quot; }, \u0026quot;resources\u0026quot;: { \u0026quot;qwc2_config\u0026quot;: { // restricted menu items \u0026quot;restricted_viewer_tasks\u0026quot;: [\u0026quot;RasterExport\u0026quot;], \u0026quot;config\u0026quot;: { // contents from QWC2 config.json \u0026quot;assetsPath\u0026quot;: \u0026quot;/assets\u0026quot;, // ... } }, \u0026quot;qwc2_themes\u0026quot;: { // contents from QWC2 themes.json \u0026quot;themes\u0026quot;: { \u0026quot;items\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;qwc_demo\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Demo\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;/ows/qwc_demo\u0026quot;, // ... \u0026quot;sublayers\u0026quot;: [ // ... ] } ], \u0026quot;backgroundLayers\u0026quot;: [ // ... ], // ... } } } } All config options may be overridden by setting corresponding upper-case environment variables, e.g. OGC_SERVICE_URL for ogc_service_url.\nMain optional QWC services:\n auth_service_url: QWC Auth Service URL data_service_url: QWC Data Service URL elevation_service_url: QWC Elevation Service URL info_service_url: QWC FeatureInfo Service URL legend_service_url: QWC Legend Service URL permalink_service_url: QWC Permalink Service URL print_service_url: QWC Print Service URL proxy_service_url: Proxy Service URL search_service_url: QWC Search Service URL search_data_service_url: QWC Search Result Service URL  qwc2_config contains the QWC2 application configuration, with config corresponding to the contents of your standalone config.json file (see Documentation).\nqwc2_themes contains the full themes configuration, corresponding to the contents of your standalone themes.json collected from themesConfig.json.\nAdd new themes to your themesConfig.json (see Documentation) and put any theme thumbnails into $QWC2_PATH/assets/img/mapthumbs/. The themesConfig.json file is used to collect the full themes configuration using GetProjectSettings.\nPermissions  File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;viewer_tasks\u0026#34;: [], \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_polygons\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;geographic_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;country_names\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;states_provinces\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;bluemarble_bg\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;osm_bg\u0026#34; } ], \u0026#34;print_templates\u0026#34;: [\u0026#34;A4 Landscape\u0026#34;] } ], \u0026#34;background_layers\u0026#34;: [\u0026#34;bluemarble\u0026#34;, \u0026#34;mapnik\u0026#34;], \u0026#34;data_datasets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo.edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34; ] } ] } }, { \u0026#34;role\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;viewer_tasks\u0026#34;: [\u0026#34;RasterExport\u0026#34;] } } ] }  viewer_tasks: permitted menu items if any are restricted wms_services: permitted WMS services, layers and print templates background_layers: permitted background layers data_datasets: permitted datasets for editing  In this example, the Raster Export map tool will only be visible for users with the role demo.\nUsage Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nBase URL:\nhttp://localhost:5030/  Sample requests:\ncurl 'http://localhost:5030/config.json' curl 'http://localhost:5030/themes.json'  Docker usage Run docker image To run this docker image you will need the following three additional services:\n qwc-postgis qwc-qgis-server qwc-ogc-service qwc-data-service  Those services can be found under https://github.com/qwc-services/. The following steps explain how to download those services and how to run the qwc-map-viewer with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Choose between a version of the qwc-map-viewer\nqwc-map-viewer-demo This is the demo version used in the docker-compose-example.yml file. With this version, the docker image comes with a preinstalled version of the latest qwc2-demo-app build and the python application for the viewer. Use this docker image, if you don\u0026rsquo;t have your own build of the QWC2 app.\nqwc-map-viewer-base If you want to use your own QWC2 build then this is the docker image that you want to use. This docker image comes with only the python application installed on. Here is an example, on how you can add you own QWC2 build to the docker image:\nqwc-map-viewer: image: sourcepole/qwc-map-viewer-base ports: - \u0026quot;127.0.0.1:5030:9090\u0026quot; # Here you mount your own QWC2 build volumes: - /PATH_TO_QWC2_BUILD/:/qwc2:ro - /PATH_TO_CONFIG:/srv/qwc_service/config:ro Step 4: Start docker containers\ndocker-compose up qwc-map-viewer  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-packages .venv  Without system packages:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  "},{"uri":"https://qwc.sourcepole.com/quick-start/","title":"Quick Start","tags":[],"description":"","content":"Docker containers for QWC services Create a QWC services dir:\nmkdir qwc-services cd qwc-services/  Clone Docker containers for QWC services:\ngit clone https://github.com/qwc-services/qwc-docker.git  Install Docker and setup containers (see qwc-docker README):\ncd qwc-docker/ cp docker-compose-example.yml docker-compose.yml  Create a secret key:\npython3 -c 'import secrets; print(\u0026quot;JWT_SECRET_KEY=\\\u0026quot;%s\\\u0026quot;\u0026quot; % secrets.token_hex(48))' \u0026gt;.env  Set permissions for writable volumes:\nsudo chown -R www-data:www-data volumes/qgs-resources sudo chown -R www-data:www-data demo-config sudo chown -R www-data:www-data volumes/qwc2/assets sudo chown 8983:8983 volumes/solr/data  Run containers Start all containers:\ndocker-compose up -d  Follow log output:\ndocker-compose logs -f  Open map viewer:\nhttp://localhost:8088/  Open Admin GUI (Admin user: admin:admin, requires password change on first login):\nhttp://localhost:8088/qwc_admin  Sign in (Demo user: demo:demo):\nhttp://localhost:8088/auth/login  Sign out:\nhttp://localhost:8088/auth/logout  Stop all containers:\ndocker-compose down  Add a QGIS project Setup PostgreSQL connection service file ~/.pg_service.conf for DB connections from the host machine to PostGIS container:\ncat \u0026gt;\u0026gt;~/.pg_service.conf \u0026lt;\u0026lt;EOS [qwc_geodb] host=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable EOS  Open project demo-projects/natural-earth-countries.qgz with QGIS and save as volumes/config-in/default/qgis_projects/natural-earth-countries.qgs Update configuration in Admin GUI  Add an editable layer  Add edit_polygon layer in QGIS project Add map and data resources with permissions Update configuration in Admin GUI  Add a custom edit form Adapt edit form with Drag and Drop Designer:\n Change attribute form type to Drag and Drop Designer. Change form layout Update configuration in Admin GUI  Use the previously generated edit form in volumes/qwc2/assets/forms/autogen/ as a template.\nEdit and save the form with QT Designer.\nCopy the form into the volumes:\nsudo cp natural-earth-countries_edit_polygons.ui volumes/config-in/default/qgis_projects/ sudo cp natural-earth-countries_edit_polygons.ui volumes/qgs-resources/  Change attribute form type to Provide ui-file.\nSelect natural-earth-countries_edit_polygons.ui as Edit UI.\nUpdate configuration in Admin GUI.\nEnable Fulltext search Make solr owner of solr data sudo chown 8983:8983 volumes/solr/data\n# Cleanup sudo rm -rf volumes/solr/data/* docker-compose restart qwc-solr curl 'http://localhost:8983/solr/gdi/dih_geodata?command=full-import' curl 'http://localhost:8983/solr/gdi/dih_geodata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:austr*' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=full-import\u0026amp;clean=false' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:qwc_demo'  Test query for fulltext search:\ncurl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:austr*'  "},{"uri":"https://qwc.sourcepole.com/authentication/qwc-ldap-auth/","title":"LDAP Authentication Service","tags":[],"description":"","content":"Authentication with LDAP/Active Directory\nConfiguration See also flask-ldap3-login\n   ENV default value description     JWT_SECRET_KEY ******** secret key for JWT token (same for all services)   LDAP_HOST localhost Hostname of your LDAP Server   LDAP_PORT 389 The port number of your LDAP server.   LDAP_USE_SSL False Set to True if your server uses SSL   LDAP_BASE_DN dc=example,dc=org Base DN of your directory   LDAP_USER_DN ou=users Users DN to be prepended to the Base DN   LDAP_GROUP_DN ou=groups Groups DN to be prepended to the Base DN   LDAP_SEARCH_FOR_GROUPS False Search for groups   LDAP_GROUP_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific group   LDAP_USER_SEARCH_SCOPE LEVEL Specifies what scope to search in when searching for a specific user   LDAP_USER_RDN_ATTR cn The RDN attribute for your user schema on LDAP   LDAP_USER_LOGIN_ATTR cn The Attribute you want users to authenticate to LDAP with   LDAP_BIND_USER_DN None The Username to bind to LDAP with   LDAP_BIND_USER_PASSWORD None The Password to bind to LDAP with    Usage Run standalone application:\npython server.py  Endpoints:\nhttp://localhost:5017/login http://localhost:5017/logout  Development Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\npython server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-ogc-service/","title":"QWC OGC Service","tags":[],"description":"","content":"Provide OGC services with permission filters as a proxy to a QGIS server.\nNote: requires a QGIS server running on default_qgis_server_url.\nConfiguration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nData Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/ogcConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-ogc-service/v2/schemas/qwc-ogc-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;ogc\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://localhost:8001/ows/\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;wms_url\u0026#34;: \u0026#34;http://localhost:8001/ows/qwc_demo\u0026#34;, \u0026#34;online_resources\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;http://localhost:5013/qwc_demo\u0026#34;, \u0026#34;feature_info\u0026#34;: \u0026#34;http://localhost:5013/qwc_demo\u0026#34;, \u0026#34;legend\u0026#34;: \u0026#34;http://localhost:5013/qwc_demo\u0026#34; }, \u0026#34;root_layer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Edit Points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ], \u0026#34;queryable\u0026#34;: true }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Edit Lines\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ], \u0026#34;queryable\u0026#34;: true }, { \u0026#34;name\u0026#34;: \u0026#34;edit_polygons\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Edit Polygons\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ], \u0026#34;queryable\u0026#34;: true } ] }, { \u0026#34;name\u0026#34;: \u0026#34;geographic_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;country_names\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;states_provinces\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Countries\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;formal_en\u0026#34;, \u0026#34;pop_est\u0026#34;, \u0026#34;subregion\u0026#34;, \u0026#34;geometry\u0026#34; ], \u0026#34;queryable\u0026#34;: true } ] }, \u0026#34;print_url\u0026#34;: \u0026#34;http://localhost:5013/qwc_demo\u0026#34;, \u0026#34;print_templates\u0026#34;: [\u0026#34;A4 Landscape\u0026#34;], \u0026#34;internal_print_layers\u0026#34;: [\u0026#34;bluemarble_bg\u0026#34;, \u0026#34;osm_bg\u0026#34;] } ], \u0026#34;wfs_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;wfs_url\u0026#34;: \u0026#34;http://localhost:8001/ows/qwc_demo_wfs\u0026#34;, \u0026#34;online_resource\u0026#34;: \u0026#34;http://localhost:5013/qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34; ] } ] } ] } } Note: wfs_services example for a separate QGIS project qwc_demo_wfs with WFS enabled.\nPermissions  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;edit_polygons\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;geographic_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;country_names\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;states_provinces\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;formal_en\u0026#34;, \u0026#34;pop_est\u0026#34;, \u0026#34;subregion\u0026#34;, \u0026#34;geometry\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;bluemarble_bg\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;osm_bg\u0026#34; } ], \u0026#34;print_templates\u0026#34;: [\u0026#34;A4 Landscape\u0026#34;] } ] }, \u0026#34;wfs_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34; ] } ] } ] } ] } Note: layers in wms_services is a flat list of all permitted layers, group layers and internal print layers.\nUsage Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nSet the QGIS_SERVER_URL environment variable to the QGIS server URL when starting this service. (default: http://localhost:8001/ows/ on qwc-qgis-server container)\nBase URL:\nhttp://localhost:5013/  Service API:\nhttp://localhost:5013/api/  Sample requests:\ncurl 'http://localhost:5013/qwc_demo?VERSION=1.1.1\u0026amp;SERVICE=WMS\u0026amp;REQUEST=GetCapabilities'  Docker usage To run this docker image you will need a running QGIS server.\nThe following steps explain how to download the QGIS server docker image and how to run the qwc-ogc-service service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-ogc-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-packages .venv  Without system packages:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt pip install flask_cors  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  "},{"uri":"https://qwc.sourcepole.com/configuration/","title":"Configuration","tags":[],"description":"","content":"Configuration database The Configuration database (ConfigDB) contains the database schema qwc_config for configurations and permissions of QWC services.\nThis database uses the PostgreSQL connection service qwc_configdb by default, which can be setup for the corresponding database in the PostgreSQL connection service file pg_service.conf. This default can be overridden by setting the environment variable CONFIGDB_URL to a custom DB connection string (see below).\nAdditional user fields are saved in the table qwc_config.user_infos with a a one-to-one relation to qwc_config.users via the user_id foreign key. To add custom user fields, add new columns to your qwc_config.user_infos table and set your USER_INFO_FIELDS accordingly (see below).\nDatabase migrations An existing ConfigDB can be updated to the latest schema by running the database migrations from the qwc-config-db directory:\ncd qwc-config-db/ git pull alembic upgrade head  Service configurations The QWC Services are generally configured using environment variables. These can be set when running the services locally or in docker-compose.yml when using Docker.\nCommon configuration:\n   ENV default value description     CONFIG_PATH . Base path for service configuration files   JWT_SECRET_KEY ******** secret key for JWT token   TENANT_URL_RE None Regex for tenant extraction from base URL. Example: ^https?://.+?/(.+?)/   TENANT_HEADER None Tenant Header name. Example: Tenant    See READMEs of services for details.\nResources and Permissions Permissions and configurations are based on different resources with assigned permissions in the configuration database. These can be managed in the QWC configuration backend.\nResources The following resource types are available:\n map: WMS corresponding to a QGIS Project  layer: layer of a map  attribute: attribute of a map layer   print_template: print composer template of a QGIS Project data: Data layer for editing  attribute: attribute of a data layer   data_create: Data layer for creating features data_read: Data layer for reading features data_update: Data layer for updating features data_delete: Data layer for deleting features   viewer: custom map viewer configuration viewer_task: permittable viewer tasks  The resource name corresponds to the technical name of its resource (e.g. WMS layer name).\nThe resource types can be extended by inserting new types into the qwc_config.resource_types table. These can be queried, e.g. in a custom service, by using PermissionClient::resource_permissions() or PermissionClient::resource_restrictions() from QWC Services Core.\nAvailable map, layer, attribute and print_template resources are collected from WMS GetProjectSettings and the QGIS projects.\ndata and their attribute resources define a data layer for the Data service. Database connections and attribute metadata are collected from the QGIS projects.\nFor more detailed CRUD permissions data_create, data_read, data_update and data_delete can be used instead of data (data and write=False is equivalent to data_read; data and write=True is equivalent to all CRUD resources combined).\nThe viewer resource defines a custom viewer configuration for the map viewer (see Custom viewer configurations).\nThe viewer_task resource defines viewer functionalities (e.g. printing or raster export) that can be restricted or permitted. Their name (e.g. RasterExport) corresponds to the key in menuItems and toolbarItems in the QWC2 config.json. Restricted viewer task items are then removed from the menu and toolbar in the map viewer. Viewer tasks not explicitly added as resources are kept unchanged from the config.json.\nPermissions Permissions are based on roles. Roles can be assigned to groups or users, and users can be members of groups. A special role is public, which is always included, whether a user is signed in or not.\nEach role can be assigned a permission for a resource. The write flag is only used for data resources and sets whether a data layer is read-only.\nBased on the user\u0026rsquo;s identity (user name and/or group name), all corresponding roles and their permissions and restrictions are collected. The service configurations are then modified according to these permissions and restrictions.\nUsing the DEFAULT_ALLOW environment variable, some resources can be set to be permitted or restricted by default if no permissions are set (default: False). Affected resources are map, layer, print_template and viewer_task.\ne.g. DEFAULT_ALLOW=True: all maps and layers are permitted by default e.g. DEFAULT_ALLOW=False: maps and layers are only available if their resources and permissions are explicitly configured\nGroup registration Using the optional Registration GUI allows users to request membership or unsubscribe from registrable groups. These requests can then be accepted or rejected in the Admin GUI.\nWorkflow:\n Admin GUI  admin user creates new groups with assigned roles and permissions on resources admin user configures registrable groups   Registration GUI  user select desired groups from registrable groups and submits application form admin users are notified of new registration requests   Admin GUI  admin user selects entry from list of pending registration requests admin user accepts or rejects registration requests for a user user is added to or removed from accepted groups user is notified of registration request updates   Map Viewer  user permissions are updated for new groups    "},{"uri":"https://qwc.sourcepole.com/viewer/","title":"QGIS Web Client 2","tags":[],"description":"","content":"Introduction QGIS Web Client 2 (QWC2) is a modular next generation responsive web client for QGIS Server, built with ReactJS and OpenLayers.\nIt is released under the terms of the BSD license.\nRequirements As a minimum, a working QGIS server environment is required. Projects which are to be offered as QWC2 topics must be published as WMS.\nFurthermore, a web server is required which will serve the QWC2 application.\nQuick start QWC2 is divided into two repositories:\n The QWC2 components, hosted at https://github.com/qgis/qwc2/. This repository contains the core building blocks common to all QWC2 applications. The QWC2 application, an example is hosted at https://github.com/qgis/qwc2-demo-app. This repository contains the user-specific configuration of the core components and can also include any other custom components.  Additionally, some QWC2 components (such as permalink generation, elevation queries, editing, etc) require external services. The reference implementation of these services are hosted at https://github.com/qwc-services/.\nTo work with QWC2, you will need a minimal development environment consisting of git, node and yarn.\nThe fastest way to get started is by recursively cloning the demo application repository:\n$ git clone --recursive https://github.com/qgis/qwc2-demo-app.git  Next, install all required dependencies:\n$ cd qwc2-demo-app $ yarn install  Then, start a local development application:\n$ yarn start  The development application will run by default on http://localhost:8081. Note: if you are behind a proxy server, you\u0026rsquo;ll need to specify the proxy settings.\nAt this point, you can customize and configure the application according to your needs, as described in detail in the following chapters.\nThe final step is to compile a deployable application bundle for production:\n$ yarn run prod  You can then deploy the contents of the prod folder to your web server root. If you opt to deploy the application to a subfolder of the web server root, you will need to adjust the assetsPath and translationsPath settings in config.json accordingly.\nNote: On some Linux distributions, yarn may refer to the tool of the cmdtest software package, not the Yarn package manager. The latter might instead be called yarnpkg.\nQWC2 configuration The layout of the development tree is as follows:\n   Path Description     ├─ assets/    │ ├─ css/qwc2.css Master style sheet   │ ├─ img/ Application logo   │ │ └─ mapthumbs/ Map thumbnails, typically autogenerated   │ └─ templates/    │ └─ legendprint.html HTML template for the legend print   ├─ js/    │ ├─ app.jsx Entry point of the ReactJS application   │ ├─ appConfig.js Configuration of the qwc2 core modules   │ ├─ Help.jsx Component for rendering a user-defined Help dialog   │ └─ SearchProviders.js Search providers   ├─ icons/ Application icons   ├─ qwc2/ Git submodule containing the core qwc2 components   ├─ translations/ Translation files   ├─ config.json Master configuration file   ├─ index.html Entry point   ├─ package.json NodeJS configuration file   ├─ styleConfig.json Configuration of some application-wide styles   ├─ themesConfig.json Themes configuration   ├─ themes.json Full theme configuration, autogenerated from themesConfig.json   └─ webpack.config.js Webpack dev server and application bundler configuration    These files are described in detail in the following sections, in order of importance.\nApplication configuration: the config.json and js/appConfig.js files The central aspect to keep in mind is that a QWC2 application consists of a collection of plugins, which can be individually enabled and configured, in particular separately for desktop and mobile mode. Together, the config.json and js/appConfig.js files control these plugins, along with a number of other global settings.\nThe js/appConfig.js is the build-time configuation file, and defines:\n The default application locale, built into the application. This locale is used if no available locale matches the browser locale. Which plugins are built into the application. Plugins left out here will be completely omitted when compiling the application bundle, and will hence also reduce the size of the bundle. Various hook functions, as documented in the sample sample js/appConfig.js.  The config.json file is the run-time configuration file. It contains the following settings:\nURLs of external services: Some external services can be used to enhance the application. The reference implementation of these services are hosted at https://github.com/qwc-services/. The following services can be configured:\n   Setting Description     permalinkServiceUrl Generates and resolves compact permalinks for the Share plugin. If omitted, the full URL will be used.   elevationServiceUrl Returns elevation values, used to generate a height profile when measuring lines and display elevation information in the map right-click information bubble. If omitted, the respective information will not be displayed in the client.   editServiceUrl Service for editing features of layers served by QGIS Server. Required by the Editing plugin.   mapInfoService Returns additional information to be displayed in the map right-click information bubble. If omitted, no additional information will be displayed.   featureReportService Returns a custom document associated to a feature. See themesConfig.json.    Global settings:\nAll settings are optional, with fallback to the default values as documented.\n   Setting Description     translationsPath Path from to the translations folder. Default value: translations.   assetsPath Path from to the assets folder. Default value: assets.   urlPositionFormat How to encode the current map extent in the URL, either centerAndZoom or extent. See URL parameters for details. Default value: extent.   urlPositionCrs The CRS used to encode the current map extent coordinates in the URL. Default value: the map projection.   omitUrlParameterUpdates Whether to omit updating the URL parameters. Default value: false.   defaultFeatureStyle The default style to use for selection geometries and other unstyled features. Default value: see qwc2/utils/FeatureStyles.js.   projections A list of map projections to register, in the format {\u0026quot;code\u0026quot;: \u0026quot;\u0026lt;code\u0026gt;\u0026quot;, \u0026quot;proj\u0026quot;: \u0026quot;\u0026lt;proj4def\u0026gt;\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;\u0026lt;label\u0026gt;\u0026quot;}. By default, EPSG:3857 and EPSG:4326 are registered.   allowFractionalZoom Whether to allow arbitrary scales for viewing the map. Default value: false.   localeAwareNumbers Whether to use locale aware numbers throughout. Default value: false.   wmsDpi The DPI to pass to the WMS requests. Default value: 96.   wmsHidpi Whether to honour the device pixel ratio for WMS GetMap requests. Default value: true.   externalLayerFeatureInfoFormats A dictionary of feature info formats for external layers, in the format {\u0026quot;\u0026lt;url\u0026gt;\u0026quot;: \u0026quot;\u0026lt;format\u0026gt;\u0026quot;, ...}. If the GetFeatureInfo URL of a layer contains the specified \u0026lt;url\u0026gt;, the corresponding format is used.    Global settings, overridable per theme:The following options can be specified globally, and also overriden per theme, see themesConfig.json. All settings are optional, with fallback to the default values as documented.\n   Setting Description     preserveExtentOnThemeSwitch Whether to preserve the current map extent when switching theme, if possible (see below). Default value: false.   preserveBackgroundOnThemeSwitch Whether to preserve the current background layer when switching theme, if possible. Default value: false.   preserveNonThemeLayersOnThemeSwitch Whether to preserve non-theme layers when switching theme. Default value: false.   allowReorderingLayers Whether to allow re-ordering layers in the layer tree. Default value: false.   flattenLayerTreeGroups Whether to display a flat layer tree, omitting the groups. Default value: false.   allowLayerTreeSeparators Allows users to add separator items in a flat layer tree. Default value: false.   preventSplittingGroupsWhenReordering Whether to prevent splitting sibling groups or the group itself when reordering items. Default value: false.   allowRemovingThemeLayers Whether to allow removing any theme layers from the layer tree. Default value: false.   searchThemes Whether allow searching for themes from the global search field. Default value: false.   allowAddingOtherThemes Whether to allow adding another theme to a currently loaded theme. Default value: false.   disableImportingLocalLayers Whether to hide the option to import local layers from the layer tree. Default value: false.   importLayerUrlPresets A list of predefined URLs from which the user can choose when importing layers from the layer tree. Entries must be strings or objects of the format {\u0026quot;label\u0026quot;: \u0026quot;\u0026lt;Label\u0026gt;\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;\u0026lt;URL\u0026gt;\u0026quot;}. See also Layer catalogs.   identifyTool The name of the identify plugin to use. It is possible to have multiple identify tools, and i.e. on a per-theme basis select which one is active. Default value: Identify.   globallyDisableDockableDialogs Whether to globally disable the dockable feature of popup dialogs. Default value: false.    Notes:\n The layer tree supports re-ordering layers via drag-and-drop if allowReorderingLayers = true and either preventSplittingGroupsWhenReordering = true or flattenLayerTreeGroups = true. If preserveExtentOnThemeSwitch = true, the current extent is preserved if it is within the new theme extent and if the current theme map projection is equal to the new theme projection. If preserveExtentOnThemeSwitch = \u0026quot;force\u0026quot;, the current extent is preserved regardless of whether it is within the new theme extent, but the current and new theme map projections must still match.  Plugin configuration: The plugin configuration is entered separately for desktop and for mobile mode. Refer to the sample config.json for a list of available configuration options. Each plugin configuration block is of the format\n{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;PluginName\u0026quot;\u0026gt;, \u0026quot;cfg\u0026quot;: { ... }, \u0026quot;mapClickAction\u0026quot;: \u0026lt;\u0026quot;identify\u0026quot;|\u0026quot;unset\u0026quot;|null\u0026gt; }  where\n name: The plugin name cfg: Optional: arbitrary configuration properties, directly passed to the relative plugin class as React props. mapClickAction: Optional: for plugins which are associated to a viewer task (and typically linked in the menuItems or toolbarItems of the TopBar, see below), determines whether a click in the map will result in the identify tool being invoked, the task being unset, or whether no particular action should be performed (default). Note: \u0026quot;mapClickAction\u0026quot; should be null or omitted for plugins which handle mouse events on the map themselves. Can optionally also be specified directly in the menuItems or toolbarItems entries, see below.  You can omit a plugin entry to disable it in desktop and/or mobile mode. To completely remove a plugin from the compiled application, remove the corresponding entry in js/appConfig.js.\nA particularly interesting aspect is the configuration of the entries in the application menu and toolbar, i.e. the entries in menuItems and toolbarItems in the TopBar configuration. The most common format for linking an entry to an existing plugin is\n{\u0026quot;key\u0026quot;: \u0026quot;\u0026lt;key\u0026gt;\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;\u0026lt;icon\u0026gt;\u0026quot;, \u0026quot;themeWhitelist\u0026quot;: [\u0026quot;\u0026lt;themename\u0026gt;\u0026quot;, ...], \u0026quot;mapClickAction\u0026quot;: \u0026lt;\u0026quot;identify\u0026quot;|\u0026quot;unset\u0026quot;|null\u0026gt;, \u0026quot;mode\u0026quot;: \u0026quot;\u0026lt;mode\u0026gt;\u0026quot;, \u0026quot;requireAuth\u0026quot;: \u0026lt;true|false\u0026gt;}  where\n key: The name of the plugin to activate when the entry is clicked, i.e. LayerTree. Also used to lookup the label for the entry from the translations, using the appmenu.items.\u0026lt;key\u0026gt; message identifier (see Managing translations). icon: The icon of the entry, either a name (without the .svg extension) of an icon in icons/, or :/\u0026lt;path_to_asset\u0026gt; containing the path relative to assetsPath of an asset image. themeWhitelist: Optional, allows specifying a whitelist of theme names or titles for which the entry should be visible. mapClickAction: Optional, takes precedence over the mapClickAction setting specified in the plugin configuration block, if any. See above. mode: Optional, depending on the plugin, a mode can be configured to launch the plugin directly in a specific mode. For instance, the Measure plugin supports specifying the measurement mode (Point, LineString, Polygon). requireAuth: Optional, the entry is only visible when user is logged-in when true (works with qwc-services).  Additionally, entries opening external URLs can be defined as follows:\n{\u0026quot;key\u0026quot;: \u0026quot;\u0026lt;key\u0026gt;\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;\u0026lt;icon\u0026gt;\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;\u0026lt;url\u0026gt;\u0026quot;}  where\n `Key: An arbitrary key name (not used by existing plugins), used to lookup the the label for the entry from the translations. icon: As above. url: The URL to open. Can contain as placeholders the keys listed in URL parameters, encolsed in $ (i.e. $e$ for the extent). In addition, the placeholders $x$ and $y$ for the individual map center coordinates are also supported.  Theme configuration: QGIS projects and the themesConfig.json file A theme corresponds to a QGIS project, published as WMS and served by QGIS Server.\nCreating and publishing a QGIS project The first step is to prepare a QGIS project. Besides the common tasks of adding and grouping layers, the following table gives an overview of settings which influence how the theme is displayed by QWC2:\n   What Where Description     Service capabilities Project Properties → QGIS Server → Service capabilities Must be checked for QGIS Server to publish the project.   Service Metadata Project Properties → QGIS Server → Service capabilities Shown in the theme info dialog, invokable from the Layer Tree panel titlebar.   Title, keywords Project Properties → QGIS Server → Service capabilities Theme title, displayed in the Theme Switcher, and keywords, useful for filtering.   Queryable layers Project Properties → Data sources Mark layers as identifyable by the client.   FeatureInfo geometry Project Properties → QGIS Server → WMS Capabilities → Add geometry to feature response Return feature geometries with the GetFeatureInfo request. Allows the client to highlight the selected features.   Layer Display Field Vector Layer Properties → Display The field used in the identify results.   Layer Map Tip Vector Layer Properties → Display The contents of the Map Tip shown when hovering over layers in the client, if displaying Map Tips is enabled in the Layer Tree.   Layer Metadata Layer Properties → QGIS Server Shown in the client Layer Info dialog, invokable from the Layer Tree.   Scale range Layer Properties → Rendering → Scale dependent visibility The scale range within which a layer is visible, useful to improve rendering performance.   Initial visibility Layers Panel Initial visibility of layers and groups.   Rendering order Layer Order Panel or Layers Panel Rendering order of the layers. If layer re-ordering is enabled in config.json, the order from the Layer Order Panel is ignored.   Print layouts Layout manager The print layouts offered in the Print plugin.   Print layout labels Layout manager Print layout labels with an ID will be exposed in the Print plugin.    Configuring the themes in themesConfig.json The second step is to configure the themes which are available to QWC2 in the themesConfig.json file, which contains a list of themes, optionally organized in groups, as well as a list of background layers:\n{ \u0026quot;themes\u0026quot;: { \u0026quot;items\u0026quot;: [ { \u0026lt;ThemeDefinition\u0026gt; }, ... ], \u0026quot;groups\u0026quot;: [ { \u0026quot;title\u0026quot;: \u0026lt;Group title\u0026gt;, \u0026quot;items\u0026quot;: [{ \u0026lt;ThemeDefinition\u0026gt; }, ...], \u0026quot;groups\u0026quot;: [ { \u0026lt;Group\u0026gt; }, ...] }, ... ] }, \u0026quot;externalLayers\u0026quot;: [ { \u0026lt;ExternalLayerDefinition\u0026gt; }, ... ], \u0026quot;themeInfoLinks\u0026quot;: [ { \u0026lt;ThemeInfoLinkDefinition\u0026gt; }, ... ], \u0026quot;backgroundLayers\u0026quot;: [ { \u0026lt;BackgroundLayerDefinition\u0026gt; }, ... ], \u0026quot;defaultScales\u0026quot;: [\u0026lt;Scale denominators\u0026gt;], \u0026quot;defaultPrintScales\u0026quot; [\u0026lt;Scale denominators\u0026gt;], \u0026quot;defaultPrintResolutions\u0026quot;: [\u0026lt;DPIs\u0026gt;], \u0026quot;defaultPrintGrid\u0026quot;: [\u0026lt;Print grid, see below\u0026gt;] }  Refer to the sample themesConfig.json for a complete example.\nThe format of the theme definitions is as follows:\n   Entry Description     \u0026quot;url\u0026quot;: \u0026quot;\u0026lt;WMS URL\u0026gt;\u0026quot;, The address of desired WMS served by QGIS Server.   \u0026quot;wmsBasicAuth\u0026quot;: \u0026quot;{ Optional, allows to authenticate to QGIS Server during themes.json generation. NOTE: these credentials will solely be used by yarn run themesConfig and won\u0026rsquo;t be stored in themes.json.    \u0026quot;username\u0026quot;: \u0026lt;username\u0026gt; Optional: http basic authentication username.    \u0026quot;password\u0026quot;: \u0026lt;password\u0026gt; Optional: http basic authentication password.   },    \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;Custom title\u0026gt;\u0026quot;, Optional, override WMS title.   \u0026quot;description\u0026quot;: \u0026quot;\u0026lt;Description\u0026gt;\u0026quot;, Optional, an additional description to show below the theme title.   \u0026quot;thumbnail\u0026quot;: \u0026quot;\u0026lt;Filename\u0026gt;\u0026quot;, Optional, image file in assets/img/mapthumbs. If omitted, autogenerated via WMS GetMap.   \u0026quot;attribution\u0026quot;: \u0026quot;\u0026lt;Attribution\u0026gt;\u0026quot;, Optional, attribution which will be shown in the bottom right corner of the map.   \u0026quot;attributionUrl\u0026quot;: \u0026quot;\u0026lt;URL\u0026gt;\u0026quot;, Optional, link associated to the attribution   \u0026quot;default\u0026quot;: true, Whether to use this theme as initial theme   \u0026quot;scales\u0026quot;: [\u0026lt;Scale denominators\u0026gt;], List of denominators of allowed map scales. If omitted, defaults to defaultScales.   \u0026quot;printScales\u0026quot;: [\u0026lt;Scale denominators\u0026gt;], List of denominators of allowed print scales. If omitted, defaults to defaultPrintScales.   \u0026quot;printResolutions\u0026quot;: [\u0026lt;DPIs\u0026gt;], List of available print resolutions. If omitted, defaults to defaultPrintResolutions.   \u0026quot;printGrid\u0026quot;: [ List of grid scale-dependent grid intervals to use when printing. If omitted, defaults to defaultPrintGrid.    {\u0026quot;s\u0026quot;: \u0026lt;Scale1\u0026gt;, x: \u0026lt;Interval1\u0026gt;, y: \u0026lt;Interval1\u0026gt;}, Keep this list sorted in descending order by scale denominator.    {\u0026quot;s\u0026quot;: \u0026lt;Scale2\u0026gt;, x: \u0026lt;Interval2\u0026gt;, y: \u0026lt;Interval2\u0026gt;} In this example, {x: \u0026lt;Interval2\u0026gt;, y: \u0026lt;Interval2\u0026gt;} will be used for \u0026lt;Scale1\u0026gt; \u0026gt; Scale \u0026gt;= \u0026lt;Scale2\u0026gt;.   ],    \u0026quot;printLabelForSearchResult\u0026quot;: \u0026quot;\u0026lt;ID\u0026gt;\u0026quot;, Optional, an ID of a print layout label to which the current search result text (if any) will be written to when printing.   \u0026quot;printLabelConfig\u0026quot;: { Optional, configuration of the text input fields for print layout labels.    \u0026quot;\u0026lt;LabelId\u0026gt;\u0026quot;: {\u0026quot;rows\u0026quot;: \u0026lt;n\u0026gt;, \u0026quot;maxLength\u0026quot;: \u0026lt;n\u0026gt;}, Height of the input field in rows and maximum number of allowed characters.   },    \u0026quot;mapCrs: \u0026quot;\u0026lt;EPSG code\u0026gt;\u0026quot;, Optional, map projection, defaults to EPSG:3857.   \u0026quot;extent\u0026quot;: [\u0026lt;xmin\u0026gt;, \u0026lt;ymin\u0026gt;, \u0026lt;xmax\u0026gt;, \u0026lt;ymax\u0026gt;], Optional, override theme extent. In mapCrs.   \u0026quot;tiled\u0026quot;: \u0026lt;boolean\u0026gt;, Optional, use tiled WMS, defaults to false.   \u0026quot;format\u0026quot;: \u0026quot;\u0026lt;mimetype\u0026gt;\u0026quot;, Optional, the format to use for WMS GetMap. Defaults to image/png.   \u0026quot;externalLayers\u0026quot;: [{ Optional, external layers to use as replacements for internal layers, see below.    \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;external_layer_name\u0026gt;\u0026quot;, Name of the external layer, matching a ExternalLayerDefinition, see below.    \u0026quot;internalLayer\u0026quot;: \u0026quot;\u0026lt;QGis_layer_name\u0026gt;\u0026quot; Name of an internal layer, as contained in the QGIS project, to replace with the external layer.   }],    \u0026quot;themeInfoLinks\u0026quot;: { Optional, custom links to additional resources, shown as a menu in the theme selector in the theme switcher.\\    \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;Menu title\u0026gt;\u0026quot;, An arbitrary string shown as title of the menu.    \u0026quot;titleMsgId\u0026quot;: \u0026quot;\u0026lt;Menu title msgID\u0026gt;\u0026quot;, Alternative to title, a message ID, translated through the translation files.    \u0026quot;entries\u0026quot;: [\u0026lt;link_name\u0026gt;, ...] List of theme info link names, see below.   },    \u0026quot;backgroundLayers\u0026quot;: [{, Optional, list of available background layers.    \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;Background layer name\u0026gt;\u0026quot;, Name of matching BackgroundLayerDefinition, see below.    \u0026quot;printLayer\u0026quot;: \u0026quot;\u0026lt;QGis layer name\u0026gt;\u0026quot;\\|[\u0026lt;list\u0026gt;], Optional, name of layer to use as matching background layer when printing. Alternatively, a list [{\u0026quot;maxScale\u0026quot;: \u0026lt;scale\u0026gt;, \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;QGis layer name\u0026gt;\u0026quot;}, ..., {\u0026quot;maxScale\u0026quot;: null, \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;QGis layer name\u0026gt;\u0026quot;}] can be provided, ordered in ascending order by maxScale. The last entry should have maxScale null, as the layer used for all remaining scales. If omitted, no background is printed, unless layer is of type \u0026ldquo;wms\u0026rdquo; and printExternalLayers is true in the Print plugin configuration.    \u0026quot;visibility\u0026quot;: \u0026lt;boolean\u0026gt; Optional, initial visibility of the layer when theme is loaded.   }],    \u0026quot;searchProviders\u0026quot;: [\u0026quot;\u0026lt;ProviderId\u0026gt;\u0026quot;], Optional, list of search providers IDs. An ID corresponds to the key of the exported SearchProviders object in js/SearchProviders.js.   \u0026quot;minSearchScaleDenom\u0026quot;: \u0026lt;number\u0026gt;, Optional, minimum scale to enforce when zooming to search results. Takes precedence over value in config.json.   \u0026quot;featureReport\u0026quot;: { Optional, available feature report templates.    \u0026quot;\u0026lt;LayerId\u0026gt;\u0026quot;: \u0026quot;\u0026lt;TemplateID\u0026gt;\u0026quot;  WMS sublayer ID and associated template ID to pass to the featureReportService.   },    \u0026quot;additionalMouseCrs\u0026quot;: [\u0026quot;\u0026lt;EPSG code\u0026gt;\u0026quot;], Optional, list of additional projections for displaying the mouse position. WGS84 and mapCrs are available by default. Additional projections definitions must be added to js/appConfig.js or config.json.   \u0026quot;watermark\u0026quot;: { Optional, configuration of watermark to add to raster export images.    \u0026quot;text\u0026quot;: \u0026quot;\u0026lt;text\u0026gt;\u0026quot;, Arbitrary text.    \u0026quot;texpadding\u0026quot;: \u0026lt;number\u0026gt;, Optional, padding between text and frame, in points.    \u0026quot;fontsize\u0026quot;: \u0026lt;number\u0026gt;, Optional, font size.    \u0026quot;fontfamily\u0026quot;: \u0026quot;\u0026lt;Font family\u0026gt;\u0026quot;, Optional, font family.    \u0026quot;fontcolor\u0026quot;: \u0026quot;#RRGGBB\u0026quot;, Optional, font color.    \u0026quot;backgroundcolor\u0026quot;: \u0026quot;#RRGGBB\u0026quot;, Optional, frame background color.    \u0026quot;framecolor\u0026quot;: \u0026quot;#RRGGBB\u0026quot;, Optional, frame color.    \u0026quot;framewidth\u0026quot;: \u0026lt;number\u0026gt;, Optional, frame width.   },    \u0026quot;collapseLayerGroupsBelowLevel\u0026quot;: \u0026lt;level\u0026gt;, Optional, layer tree level below which to initially collapse groups. By default the tree is completely expanded.   \u0026quot;skipEmptyFeatureAttributes\u0026quot;: \u0026lt;boolean\u0026gt;, Optional, whether to skip empty attributes in the identify results. Default is false.   \u0026quot;mapTips\u0026quot;: \u0026lt;boolean\u0026gt;\\|null, Optional, per-theme setting whether map-tips are unavailable (null), disabled by default (false) or enabled by default (true).   \u0026quot;extraLegendParameters\u0026quot;: \u0026quot;\u0026lt;\u0026amp;KEY=VALUE\u0026gt;\u0026quot;, Optional, additional query parameters to append to WMS GetLegendGraphic.   \u0026quot;printLabelBlacklist\u0026quot;: [\u0026quot;\u0026lt;LabelId\u0026gt;\u0026quot;, ...] Optional, list of composer label ids to not expose in the print dialog.   \u0026quot;editConfig\u0026quot;: \u0026quot;\u0026lt;editConfig.json\u0026gt;\u0026quot; Optional, object or path to a filename containing the editing configuration for the theme, see EditingInterface.js.   \u0026quot;config\u0026quot;: { Optional, per-theme configuration entries which override the global entries in config.json.    \u0026quot;allowRemovingThemeLayers\u0026quot;: \u0026lt;boolean\u0026gt; See config.json for which settings can be specified here.    ...    }     External layers: External layers can be used to selectively replace layers in a QGIS project, for instance in the case of a WMS layer embedded in a QGIS project, to avoid cascading WMS requests. They are handled transparently by QWC2 (they are positioned in the layer tree identically to the internal layer they replace), but the GetMap and GetFeatureInfo requests are sent directly to the specified WMS Service.\nThe format for external layer definitions is as follows:\n   Entry Description     \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;external_layer_name\u0026gt;\u0026quot;, The name of the external layer, as referenced in the theme definitions.   \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;layer_type\u0026gt;\u0026quot;, Layer type, \u0026ldquo;wms\u0026rdquo; or \u0026ldquo;wmts\u0026rdquo;   \u0026quot;url\u0026quot;: \u0026quot;\u0026lt;wms_baseurl\u0026gt;\u0026quot;,  The WMS URL or WMTS resource URL for the external layer.    For external WMS layers, the following additional parameters apply:\n   Entry Description     \u0026quot;params\u0026quot;: { Parameters for the GetMap request.    \u0026quot;LAYERS\u0026quot;: \u0026quot;\u0026lt;wms_layername\u0026gt;,...\u0026quot;, WMS layer names.    \u0026quot;OPACITIES\u0026quot;: \u0026quot;\u0026lt;0-255\u0026gt;,...\u0026quot; Optional, if WMS server supports opacities.   },    \u0026quot;featureInfoUrl\u0026quot;: \u0026quot;\u0026lt;wms_featureinfo_baseurl\u0026gt;\u0026quot;, Optional, base URL for WMS GetFeatureInfo, if different from url.   \u0026quot;legendUrl\u0026quot;: \u0026quot;\u0026lt;wms_legendgraphic_baseurl\u0026gt;\u0026quot; , Optional, base URL for WMS GetLegendGraphic, if different from url.   \u0026quot;queryLayers\u0026quot;: [\u0026quot;\u0026lt;wms_featureinfo_layername\u0026gt;\u0026quot;, ...], Optional, list of GetFeatureInfo query layers, if different from params.LAYERS.   \u0026quot;infoFormats\u0026quot;: [\u0026quot;\u0026lt;featureinfo_format\u0026gt;\u0026quot;, ...] List of GetFeatureInfo query formats which the WMS service supports.    For external WMTS layers, the following additional parameters apply (you can use the qwc2/scripts/wmts_config_generator.py script to obtain these values):\n   Entry Description     \u0026quot;tileMatrixSet\u0026quot;: \u0026quot;\u0026lt;tile_matrix_set_name\u0026gt;\u0026quot;, The name of the tile matrix set.   \u0026quot;originX\u0026quot;: \u0026lt;origin_x\u0026gt;, The X origin of the tile matrix.   \u0026quot;originY\u0026quot;: \u0026lt;origin_y\u0026gt;, The Y origin of the tile matrix.   \u0026quot;projection\u0026quot;: \u0026quot;EPSG:\u0026lt;code\u0026gt;\u0026quot;, The layer projection.   \u0026quot;resolutions\u0026quot;: [\u0026lt;resolution\u0026gt;, ...], The list of WMTS resolutions.   \u0026quot;tileSize\u0026quot;: [\u0026lt;tile_width\u0026gt;, \u0026lt;tile_height\u0026gt;] The tile width and height.    You can also set the \u0026ldquo;Data Url\u0026rdquo; for a layer in QGIS (Layer Properties → QGIS Server → Data Url) to a string of the form\nwms:\u0026lt;service_url\u0026gt;#\u0026lt;layername\u0026gt;  (for instance, wms:http://wms.geo.admin.ch/?#ch.are.bauzonen), and an external layer pointing to the specified WMS service will automatically be created for the corresponding QGIS layer. Note that this is currently only implemented for WMS layers.\nTheme info links: You can specify links to display in an info-menu next to the respective theme title in the theme switcher entries.\nThe format for the theme info links is as follows:\n   Entry Description     \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;link_name\u0026gt;\u0026quot;, The name of the link, as referenced in the theme definitions.   \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;link_title\u0026gt;\u0026quot;, The title for the link, as displayed in the info menu of the theme entry in the theme switcher.   \u0026quot;url\u0026quot;: \u0026quot;\u0026lt;link\u0026gt;\u0026quot;, A link URL.   \u0026quot;target\u0026quot;: \u0026quot;\u0026lt;link_target\u0026gt;\u0026quot; The link target, i.e. _blank.    Background layers: Background layers are handled completely client-side and do not appear in the layer tree.\nThe format of the background layer definitions is as follows:\n   Entry Description     \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;Name\u0026gt;\u0026quot;, The name of the background layer, used in the theme definitions.   \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;Title\u0026gt;\u0026quot;,  The title of the background layer, as displayed in the background switcher.   \u0026quot;thumbnail\u0026quot;: \u0026quot;\u0026lt;Filename\u0026gt;\u0026quot;, Optional, image file in assets/img/mapthumbs. Defaults to default.jpg.   \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;Type\u0026gt;\u0026quot;, The background layer type, i.e. wms or wmts.   \u0026quot;group\u0026quot;: \u0026quot;\u0026lt;GroupId\u0026gt;\u0026quot;, Optional, a group ID string. Background layers with the same group ID will be grouped together in the background switcher.   \u0026quot;minScale\u0026quot;: \u0026lt;min_scale\u0026gt;, Optional, minimum scale denominator from which to render the layer.   \u0026quot;maxScale\u0026quot;: \u0026lt;max_scale\u0026gt;, Optional, maximum scale denominator from which to render the layer.   \u0026lt;Layer params\u0026gt; Parameters according to the specified layer type. Refer to the sample themesConfig.json for some examples.    Note: You can use the helper python script located at qwc2/scripts/wmts_config_generator.py to easily generate WMTS background layer configurations.\nAlternatively, a background layer definition can be a group of layers, in the format\n{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;Name\u0026gt;\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;Title\u0026gt;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;group\u0026quot;, \u0026quot;items\u0026quot;: [ { \u0026lt;BackgroundLayerDefinition\u0026gt; }, { \u0026lt;BackgroundLayerDefinition\u0026gt; }, ... ] }  Instead of specifiying a full background layer definition in a group, you can also reference an existing one with \u0026quot;ref\u0026quot;: \u0026quot;\u0026lt;bg_layer_name\u0026gt;\u0026quot;, and selectively override certain properties, such as minScale and maxScale:\n{ ... \u0026quot;items\u0026quot;: [ { \u0026quot;ref\u0026quot;: \u0026quot;\u0026lt;bg_layer_name\u0026gt;\u0026quot;, \u0026quot;minScale\u0026quot;: \u0026lt;min_scale\u0026gt;, \u0026quot;maxScale\u0026quot;: \u0026lt;max_scale\u0026gt; }, ... ] }  Generating themes.json The final step is to generate themes.json, the file which is ultimately read by QWC2. This file combines the input from themesConfig.json with the information from the WMS service capabilities and is automatically generated when starting the local development application via yarn start. Alternatively, it can be manually generated via\nyarn run themesconfig  or, if working in an environment without node, using the equivalent command\npython3 qwc2/scripts/themesConfig.py  If you want to manage multiple themesConfig.json files, you can specify which while should be processed by the theme generation script via the QWC2_THEMES_CONFIG environment variable.\nNote: if you are behind a proxy server and your themesConfig.json refers to resources outside the local network, you\u0026rsquo;ll need to specify the proxy settings to use in themesConfig.json by adding a toplevel block of the form\n{ \u0026quot;proxy\u0026quot;: { \u0026quot;host\u0026quot;: \u0026quot;\u0026lt;host\u0026gt;\u0026quot;, \u0026quot;port\u0026quot;: \u0026lt;port\u0026gt;, \u0026quot;auth\u0026quot;: { \u0026quot;username\u0026quot;: \u0026quot;\u0026lt;username\u0026gt;\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;\u0026lt;password\u0026gt;\u0026quot; } }, \u0026quot;themes\u0026quot;: {...}, ... }  Implementing search providers in js/SearchProviders.js Search providers are typically application specific, and hence need to be implemented in the application specific js/SearchProviders.js file. The sample js/SearchProviders.js documents how to implement search providers and contains some examples.\nAn advanced feature is the possibility to define parametrized search providers. This allows for instance to implement just a generic search provider interface in js/SearchProviders.js and move the implementation details to the service. To this end, you can also add to the searchProviders list in themesConfig.json entries of the form\n{key: \u0026lt;Key\u0026gt;, label: \u0026lt;Label\u0026gt;, ...}  Such entries are passed to the method searchProviderFactory in js/SearchProviders.js, which you can tweak to dynamically create a search provider definition based on the parameters specified in the entry. Refer to the sample js/SearchProviders.js for an example.\nImplementing the editing interface in js/EditingInterface.js The QWC2 Editing plugin allows to add, remove and edit features from the map. For this to work, the following steps need to be performed:\n The Editing plugin needs to be enabled in config.json and appConfig.js. The editServiceUrl needs to be specified in config.json. The server-side service needs to be set up. The default editing interface is the conterpart for the QWC data service. You can also use a custom editing service, in which case you need to implement a custom EditingInterface and pass it to the Editing plugin in appConfig.js. For every theme for which editing is allowed, a matching editConfig.json needs to be implemented and specified in the corresponding entry in themesConfig.json.  The format of the editConfig.json is as follows:\n   Entry Description     {     \u0026lt;LayerId\u0026gt;: { A WMS layer ID. Should be a theme WMS layer name, to ensure the WMS is correctly refreshed.    \u0026quot;layerName\u0026quot;: \u0026quot;\u0026lt;LayerName\u0026gt;\u0026quot;, The layer name to show in the selection combo box.    \u0026quot;geomType\u0026quot;: \u0026quot;\u0026lt;GeomType\u0026gt;\u0026quot;, The geometry type, either Point, LineString or Polygon.    \u0026quot;displayField\u0026quot;: \u0026quot;\u0026lt;FieldId\u0026quot;\u0026gt;\u0026quot;, The ID of the field to use in the feature selection menu.    \u0026quot;fields\u0026quot;: [{ A list of field definitions, for each exposed attribute.    \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;FieldID\u0026gt;\u0026quot;, The field ID.    \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;FieldName\u0026gt;\u0026quot;, The field name, as displayed in the editing form.    \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;FieldType\u0026gt;\u0026quot;, A field type. Either bool, list or a regular HTML input element type.    \u0026quot;constraints\u0026quot;: { Constraints for the input field.    \u0026quot;values\u0026quot;: [\u0026lt;Entries\u0026gt;], Only if type is list: an array of arbitrary strings.    ... For regular HTML input types, the ReactJS API name of any applicable HTML input constraint, i.e. maxLength or readOnly.    }     }],     \u0026quot;form\u0026quot;: \u0026quot;\u0026lt;PathToUiFile\u0026gt;\u0026quot;, As alternative to fields, a QtDesigner UI file. See below.    }    }      If you specify fields, a simple form is autogenerated based on the field definitions. If you specify form, you can specify the URL to a Qt Designer UI form (use :/\u0026lt;path\u0026gt; to specify a path below the assets folder). Most basic input elements provided by QtDesigner are supported, see this sample form. The widget names must be set equal to the attribute names.  See the sample editConfig.json for a full example. See also the QWC data service README.\nManaging translations The translations are managed on two levels:\n At QWC2 components level, in qwc2/translations. At application level, in translations.  A script will take care of merging the component translations into the application translations. This way, when updating the QWC2 submodule, new translations are automatically obtained. This script is automatically invoked on yarn start, but can also be manually invoked using\nyarn run tsupdate  Translations are stored inside the respective translations folder as regular plain-text JSON files, named \u0026lt;locale\u0026gt;.json and can be freely edited with any text editor.\nThe tsconfig.json files stored inside the respective translations folder contains the list of languages for which translations should be generated and a list of message IDs to include in the translation. The tsupdate script will automatically scan for message IDs (looking for static strings passed to LocaleUtils.tr and LocaleUtils.trmsg), store these in tsconfig.json and automatically create resp. update the translation files.\nIn some cases tsconfig.json will not pick up a message ID (for instance, if it is computed at runtime). In these cases, the message IDs can be added manually to the extra_strings section of the tsconfig.json.\nAlso it may be desired to override a translation inherited from the QWC2 components at application level. To prevent tsupdate from continuously reverting the overridden translation, the respective message IDs can be added to the overrides section in the application tsconfig.json file.\nThe typical workflow for managing application translations is:\n Declare all locales which should be supported in js/appConfig.js. Ensure these locales are listed in translations/tsconfig.json. Write the translated strings to the respective \u0026lt;locale\u0026gt;.json files. Test the translation, specifying locale=\u0026lt;locale\u0026gt; in the QWC2 application URL.  If translations of the QWC2 components for a desired language are missing, please create resp. update the translations respective files in qwc2/translations and contribute them by submitting a pull request to the upstream qwc2 repository.\nCustomizing the QWC2 appearance The following options are available for customizing the appearance of the QWC2 application while preserving compatibility with the core QWC2 components:\n Modifying the logo in assets/img/. Modifying the application icons in icons. Tweaking the colors in styleConfig.js. Adding style declarations to the master CSS stylesheet assets/css/qwc2.css. This however is potentially fragile and should only be done as a last resort. Changing the browser page title in index.html, and potentially adding a favicon. Modifying the legend print template in assets/templates/legendprint.html. The only requirement for this template is that is must contain a \u0026lt;div id=\u0026quot;legendcontainer\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; element. Modifying the custom Help component js/Help.jsx.  Note: The common application icons are located in qwc2/icons. They can be overridden by creating an icon with the same filename in the application specific icons folder. Note: The icons in the icons folder are compiled into an icon font. Currently, the icons need to be black content on transparent background, and all drawings (including texts) must be converted to paths for the icons to render correctly.\nServer-side configuration Cross-Origin requests All modern browsers will block a page from requesting resources from another origin (except for images, stylesheets, scripts, iframes and videos), unless the response from the remote origin contains a matching Access-Control-Allow-Origin header. An origin is defined as \u0026lt;scheme\u0026gt;://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;.\nFor each service QWC2 interacts with, in particular the QGIS Server, one has to ensure that this interaction isn\u0026rsquo;t blocked by the browser. The following options exist:\n Ensure that the service runs on the same origin as the web server which serves the QWC2 application. Ensure that the service sends a Access-Control-Allow-Origin header with matching origin with each response. For development purposes, use a browser plugin which adds the CORS headers, i.e. CORS Everywhere.  Filenames of print and raster and DXF export The QGIS server response for the print, raster and DXF export requests does by default not contain any Content-Disposition header, meaning that browsers will attempt to guess a filename, which typically is the last part of the URL, without any extension.\nTo ensure browsers use a proper filename, configure the web server running QGIS Server to add a suitable Content-Disposition header to the response. In the case of Apache, the rule for the print output might look as follows:\nSetEnvIf Request_URI \u0026quot;^/wms.*/(.+)$\u0026quot; project_name=$1 Header always setifempty Content-Disposition \u0026quot;attachment; filename=%{project_name}e.pdf\u0026quot; \u0026quot;expr=%{CONTENT_TYPE} = 'application/pdf'\u0026quot;  This rule will use the last part of the URL as basename and add the .pdf extension, and will also ensure that the content-type is set to application/pdf. Note that this example uses the setenvif and headers apache modules.\nURL parameters The following parameters can appear in the URL of the QWC2 application:\n t: The active theme l: The layers in the map, see below. bl: The visible background layer st: The search text sp: Applied search provider when using st Parameter e: The visible extent c: The center of the visible extent s: The current scale crs: The CRS of extent/center coordinates hc: If c is specified and hc is true or 1, a marker is set at c when starting the application. Note: requires the StartupMarkerPlugin plugin to be active.  The l parameter lists all layers in the map (redlining and background layers) as a comma separated list of entries of the form\n\u0026lt;layername\u0026gt;[\u0026lt;transparency\u0026gt;]!  where\n  layername is the WMS name of a theme layer or group, or a string of the format\n\u0026lt;wms|wfs\u0026gt;:\u0026lt;service_url\u0026gt;#\u0026lt;layername\u0026gt;  for external layers, i.e. wms:https://wms.geo.admin.ch/?#ch.are.bauzonen.\n  \u0026lt;transparency\u0026gt; denotes the layer transparency, betwen 0 and 100. If the [\u0026lt;transparency\u0026gt;] portion is omitted, the layer is fully opaque.\n  ! denotes that the layer is invisible. If omitted, the layer is visible. If the layer is visible in an invisible parent group, ~ is used.\n  Note: If group name is specified instead of the layer name, QWC2 will automatically resolve this to all layer names contained in that group, and will apply transparency and visibility settings as specified for the group.\nThe urlPositionFormat parameter in config.json determines whether the extent or the center and scale appears in the URL.\nThe urlPositionCrs parameter in config.json determines the projection to use for the extent resp. center coordinates in the URL. By default the map projection of the current theme is used. If urlPositionCrs is equal to the map projection, the crs parameter is omitted in the URL.\nIf the search text passed via st results in a unique result, the viewer automatically zooms to this result on startup. If the search result does not provide a bounding box, the minScaleDenom defined in the searchOptions of the TopBar configuration in config.json is used.\nStartup position By default, the viewer opens zooming on the respective theme extent, as defined in themes.json (and overrideable in themesConfig.json).\nAlternatively, the following three options exist to influence the startup position:\n Pass appropriate c, s or e URL parameters, as documented in URL parameters. Pass a search text which results in a unique result (i.e. a coordinate string) as URL parameter, as documented in URL parameters. Set startupMode in the LocateSupport options of the Map configuration in config.json. Possible values are DISABLED, ENABLED or FOLLOWING. If a search text is passed via st URL parameter or hc=1 is specified in the URL, the startupMode is ignored.  Layer catalogs The import layer functionality in the layertree also supports loading a layer catalog document from an URL. Two catalog formats are supported:\n  QGIS WMS/WFS connections XML: this file is produced by exporting the configured WMS or WFS connections from the QGIS data source manager dialog.\n  JSON: a document with contents\n\u0026quot;catalog\u0026quot;: { [ { \u0026quot;title\u0026quot;: \u0026quot;\u0026lt;Titel\u0026gt;\u0026quot;, \u0026quot;resource\u0026quot;: \u0026quot;\u0026lt;wms|wfs\u0026gt;:\u0026lt;service_url\u0026gt;#\u0026lt;layername\u0026gt;\u0026quot; }, ... ] }  where resource is in the same format as the serialized layer identifiers in a QWC2 URL, see URL Parameters.\n  Note that the server serving the catalog documents needs to ensure that it sets CORS headers appropriately, if they are served from a different origin than QWC2.\nKeeping the QWC2 application up to date As mentioned in the quick start chapter, QWC2 is split into a common components repository and an application specific repository. The goal of this approach is to cleanly separate user-specific configuration and components which common components which serve as a basis for all QWC2 applications, and to make it as easy as possible to rebase the application onto the latest common QWC2 components.\nThe recommended workflow is to keep the qwc2 folder a submodule referencing the upstream qwc2 repository. To update it, just checkout the latest master (or a specific commit if desired):\ncd qwc2 git checkout master git pull cd .. yarn install  It is good practice to run yarn install after pulling the submodule to ensure all the correct dependencies are installed.\nThe upgrade notes documents major changes, and in particular all incompatible changes between releases which require changes to the application specific code and/or configuration.\nAPI for external applications The API plugin binds many application actions to the window.qwc2 object and makes them accessible for external applications. Currently, the following methods are available:\n All display actions All layers actions All locate actions All map actions All task actions All theme actions All windows actions Additional API calls:  window.qwc2.addExternalLayer(resource, beforeLayerName=null) window.qwc2.drawScratch(geomType, message, drawMultiple, callback, style = null)    See the docstrings in API.js as well as the actions functions linked above for more information.\nSee api_examples.js for some concrete examples.\nDeveloping QWC2 is written in JavaScript using in particular the ReactJS, Redux and OpenLayers libraries. The following links point to some useful resources to learn the basics:\nECMAScript 2015\n https://babeljs.io/docs/learn-es2015/  ReactJS\n https://facebook.github.io/react/docs/thinking-in-react.html https://medium.com/@diamondgfx/learning-react-with-create-react-app-part-1-a12e1833fdc https://medium.com/@diamondgfx/learning-react-with-create-react-app-part-2-3ad99f38b48d https://medium.com/@diamondgfx/learning-react-with-create-react-app-part-3-322447d14192  Redux\n http://redux.js.org/ https://egghead.io/courses/getting-started-with-redux https://egghead.io/courses/building-react-applications-with-idiomatic-redux  When developing, it is useful to add debug=true to the URL query parameters, which will enable logging of all application state changes to the browser console.\n"},{"uri":"https://qwc.sourcepole.com/services/qwc-feature-info-service/","title":"QWC FeatureInfo Service","tags":[],"description":"","content":"Query layers at a geographic position using an API based on WMS GetFeatureInfo.\nThe query is handled for each layer by its layer info provider configured in the config file.\nLayer info providers:\n WMS GetFeatureInfo (default): forward info request to the QGIS Server DB Query: execute custom query SQL Custom info module: custom Python modules returning layer info  The info results are each rendered into customizable HTML templates and returned as a GetFeatureInfoResponse XML.\nSetup The DB query uses a PostgreSQL connection service or connection to a PostGIS database. This connection\u0026rsquo;s user requires read access to the configured tables.\nqwc_demo example Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service requires read access to the configured tables of the data layers from the QGIS project qwc_demo.qgs.\nSetup PostgreSQL connection service file ~/.pg_service.conf:\nhost=localhost port=5439 dbname=qwc_demo user=qwc_service password=qwc_service sslmode=disable Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nEnvironment variables:\n SKIP_EMPTY_ATTRIBUTES=\u0026lt;boolean\u0026gt;: Whether to skip empty featureinfo attributes returned by WMS GetFeatureInfo. USE_PERMISSION_ATTRIBUTE_ORDER=\u0026lt;boolean\u0026gt;: Whether to order the attributes according to order of the permitted attribute names, rather than the order returned by WMS GetFeatureInfo.  FeatureInfo Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/featureInfoConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-feature-info-service/master/schemas/qwc-feature-info-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;feature-info\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://localhost:8001/ows/\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;root_layer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Edit Demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Edit Points\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;description\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;num\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;value\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;type\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;amount\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;validated\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;{\\\u0026#34;t\\\u0026#34;: \\\u0026#34;Yes\\\u0026#34;, \\\u0026#34;f\\\u0026#34;: \\\u0026#34;No\\\u0026#34;}\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;datetime\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;geometry\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;maptip\u0026#34; } ] } ] }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Countries\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Name\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;formal_en\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Formal name\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;pop_est\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Population\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;subregion\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Subregion\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;geometry\u0026#34; } ], \u0026#34;display_field\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;info_template\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;wms\u0026#34;, \u0026#34;wms_url\u0026#34;: \u0026#34;http://localhost:8001/ows/qwc_demo\u0026#34;, \u0026#34;template\u0026#34;: \u0026#34;\u0026lt;div\u0026gt;\u0026lt;h2\u0026gt;Demo Template\u0026lt;/h2\u0026gt;Pos: {{ x }}, {{ y }}\u0026lt;br\u0026gt;Name: {{ feature.Name }}\u0026lt;/div\u0026gt;\u0026#34; } } ] } } ] } } Example info_template for WMS GetFeatureInfo:\n\u0026#34;info_template\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;wms\u0026#34;, \u0026#34;wms_url\u0026#34;: \u0026#34;http://localhost:8001/ows/qwc_demo\u0026#34;, \u0026#34;template\u0026#34;: \u0026#34;\u0026lt;div\u0026gt;\u0026lt;h2\u0026gt;Demo Template\u0026lt;/h2\u0026gt;Pos: {{ x }}, {{ y }}\u0026lt;br\u0026gt;Name: {{ feature.Name }}\u0026lt;/div\u0026gt;\u0026#34; } Example info_template for DB query:\n\u0026#34;info_template\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;sql\u0026#34;, \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_geodb\u0026#34;, \u0026#34;sql\u0026#34;: \u0026#34;SELECT ogc_fid as _fid_, name, formal_en, pop_est, subregion, ST_AsText(wkb_geometry) as wkt_geom FROM qwc_geodb.ne_10m_admin_0_countries WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(:geom, :srid)) LIMIT :feature_count;\u0026#34;, \u0026#34;template\u0026#34;: \u0026#34;\u0026lt;div\u0026gt;\u0026lt;h2\u0026gt;Demo Template\u0026lt;/h2\u0026gt;Pos: {{ x }}, {{ y }}\u0026lt;br\u0026gt;Name: {{ feature.Name }}\u0026lt;/div\u0026gt;\u0026#34; } Note: x, y and geom are passed as parameters to the SQL query. If a GetFeatureInfo request is being processed with a filter_geom parameter, geom will correspond to that parameter. Otherwise geom will be POINT(x y).\nExample info_template for Custom info module:\n\u0026#34;info_template\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;template\u0026#34;: \u0026#34;\u0026lt;div\u0026gt;\u0026lt;h2\u0026gt;Demo Template\u0026lt;/h2\u0026gt;Pos: {{ x }}, {{ y }}\u0026lt;br\u0026gt;Name: {{ feature.Name }}\u0026lt;/div\u0026gt;\u0026#34; } Base64 encoded properties The following config properties may also be set as Base64 encoded values instead:\n Default HTML info template: default_info_template_base64 Formatting expression for converting attribute values: format_base64 HTML template for info result: template_base64 Query SQL for DB query: sql_base64  Any plain text properties take precedence over their corresponding Base64 encoded property (e.g. template_base64 is only used if template is not set).\nPermissions  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;ows_type\u0026#34;: \u0026#34;WMS\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34;, \u0026#34;geometry\u0026#34;, \u0026#34;maptip\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34;, \u0026#34;attributes\u0026#34;: [\u0026#34;name\u0026#34;, \u0026#34;formal_en\u0026#34;, \u0026#34;pop_est\u0026#34;, \u0026#34;subregion\u0026#34;, \u0026#34;geometry\u0026#34;], \u0026#34;info_template\u0026#34;: true } ] } ] } } ] } HTML template A HTML template can be provided for a layer in the config file. The template must only contain the body content (without head, script, body). The HTML can be styled using inline CSS, otherwise the CSS from the QWC viewer is used.\nThis template can contain attribute value placeholders, in the form\n{{ feature.attr }}  which are replaced with the respective values when the template is rendered (using Jinja2). The following values are available in the template:\n x, y, crs: Coordinates and CRS of info query feature: Feature with attributes from info result as properties, e.g. feature.name fid: Feature ID (if present) bbox: Feature bounding box as [\u0026lt;minx\u0026gt;, \u0026lt;miny\u0026gt;, \u0026lt;maxx\u0026gt;, \u0026lt;maxy\u0026gt;] (if present) geometry: Feature geometry as WKT (if present) layer: Layer name  To automatically detect hyperlinks in values and replace them as HTML links the following helper can be used in the template:\nrender_value(value)  Example:\n\u0026lt;div\u0026gt;Result at coordinates {{ x }}, {{ y }}\u0026lt;/div\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Name:\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ feature.name }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Description:\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ feature.description }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Default info template Layers with no assigned info templates use WMS GetFeatureInfo with a default info template. The default template can also optionally be configured as default_info_template in the config file.\nThe InfoFeature feature available in the template also provides a list of its attributes:\nfeature._attributes = [ 'name': \u0026lt;attribute name\u0026gt;, 'value': \u0026lt;attribute value\u0026gt;, 'alias': \u0026lt;attribute alias\u0026gt;, 'type': \u0026lt;attribute value data type as string\u0026gt;, 'json_aliases': \u0026lt;JSON attribute aliases as {'json_key': 'value'}\u0026gt; ]  If an attribute value starts with { or [ the service tries to parse it as JSON before rendering it in the template.\nDefault info template:\n\u0026lt;table class=\u0026#34;attribute-list\u0026#34;\u0026gt; \u0026lt;tbody\u0026gt; {% for attr in feature._attributes -%} {% if attr[\u0026#39;type\u0026#39;] == \u0026#39;list\u0026#39; -%} {# attribute is a list #} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-title wrap\u0026#34;\u0026gt;\u0026lt;i\u0026gt;{{ attr[\u0026#39;alias\u0026#39;] }}\u0026lt;/i\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;table class=\u0026#34;identify-attr-subtable\u0026#34;\u0026gt; \u0026lt;tbody\u0026gt; {%- for item in attr[\u0026#39;value\u0026#39;] %} {%- if item is mapping -%} {# item is a dict #} {% for key in item -%} {% if not attr[\u0026#39;json_aliases\u0026#39;] %} {% set alias = key %} {% elif key in attr[\u0026#39;json_aliases\u0026#39;] %} {% set alias = attr[\u0026#39;json_aliases\u0026#39;][key] %} {% endif %} {% if alias %} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-title wrap\u0026#34;\u0026gt; \u0026lt;i\u0026gt;{{ alias }}\u0026lt;/i\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-value wrap\u0026#34;\u0026gt; {{ render_value(item[key]) }} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endif %} {%- endfor %} {%- else -%} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-value identify-attr-single-value wrap\u0026#34; colspan=\u0026#34;2\u0026#34;\u0026gt; {{ render_value(item) }} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- endif %} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-spacer\u0026#34; colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- elif attr[\u0026#39;type\u0026#39;] in [\u0026#39;dict\u0026#39;, \u0026#39;OrderedDict\u0026#39;] -%} {# attribute is a dict #} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-title wrap\u0026#34;\u0026gt;\u0026lt;i\u0026gt;{{ attr[\u0026#39;alias\u0026#39;] }}\u0026lt;/i\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;table class=\u0026#34;identify-attr-subtable\u0026#34;\u0026gt; \u0026lt;tbody\u0026gt; {% for key in attr[\u0026#39;value\u0026#39;] -%} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-title wrap\u0026#34;\u0026gt; \u0026lt;i\u0026gt;{{ key }}\u0026lt;/i\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-value wrap\u0026#34;\u0026gt; {{ render_value(attr[\u0026#39;value\u0026#39;][key]) }} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- else -%} {# other attributes #} \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-title wrap\u0026#34;\u0026gt; \u0026lt;i\u0026gt;{{ attr[\u0026#39;alias\u0026#39;] }}\u0026lt;/i\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;identify-attr-value wrap\u0026#34;\u0026gt; {{ render_value(attr[\u0026#39;value\u0026#39;]) }} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {%- endif %} {%- endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; DB Query In a DB Query the following values are replaced in the SQL:\n :x: X coordinate of query :y: Y coordinate of query :srid: SRID of query coordinates :resolution: Resolution in map units per pixel :FI_POINT_TOLERANCE: Tolerance for picking points, in pixels (default=16) :FI_LINE_TOLERANCE: Tolerance for picking lines, in pixels (default=8) :FI_POLYGON_TOLERANCE: Tolerance for picking polygons, in pixels (default=4) :i: X ordinate of query point on map, in pixels :j: Y ordinate of query point on map, in pixels :height: Height of map output, in pixels :width: Width of map output, in pixels :bbox: \u0026lsquo;Bounding box for map extent as minx,miny,maxx,maxy\u0026rsquo; :crs: \u0026lsquo;CRS for map extent\u0026rsquo; :feature_count: Max feature count :with_geometry: Whether to return geometries in response (default=1) :with_maptip: Whether to return maptip in response (default=1)  The query may return the feature ID as _fid_ and the WKT geometry as wkt_geom. All other selected columns are used as feature attributes.\nSample queries:\nSELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects(wkb_geometry, ST_GeomFromText(\u0026#39;POINT(:x :y)\u0026#39;, :srid)) LIMIT :feature_count; SELECT ogc_fid as _fid_, name, ..., ST_AsText(wkb_geometry) as wkt_geom FROM schema.table WHERE ST_Intersects( wkb_geometry, ST_Buffer( ST_GeomFromText(\u0026#39;POINT(:x :y)\u0026#39;, :srid), :resolution * :FI_POLYGON_TOLERANCE ) ) LIMIT :feature_count; Custom info modules Custom info modules can be placed in ./info_modules/custom/\u0026lt;module name\u0026gt;/ and must provide the following method:\ndef layer_info(layer, x, y, crs, params, identity) Input parameters:\n  layer (str): Layer name\n  x (float): X coordinate of query\n  y (float): Y coordinate of query\n  crs (str): CRS of query coordinates\n  params (obj): FeatureInfo service params\n { 'i': \u0026lt;X ordinate of query point on map, in pixels\u0026gt;, 'j': \u0026lt;Y ordinate of query point on map, in pixels\u0026gt;, 'height': \u0026lt;Height of map output, in pixels\u0026gt;, 'width': \u0026lt;Width of map output, in pixels\u0026gt;, 'bbox': '\u0026lt;Bounding box for map extent as minx,miny,maxx,maxy\u0026gt;', 'crs': '\u0026lt;CRS for map extent\u0026gt;', 'feature_count': \u0026lt;Max feature count\u0026gt;, 'with_geometry': \u0026lt;Whether to return geometries in response (default=1)\u0026gt;, 'with_maptip': \u0026lt;Whether to return maptip in response (default=1)\u0026gt;, 'FI_POINT_TOLERANCE': \u0026lt;Tolerance for picking points, in pixels (default=16)\u0026gt;, 'FI_LINE_TOLERANCE': \u0026lt;Tolerance for picking lines, in pixels (default=8)\u0026gt;, 'FI_POLYGON_TOLERANCE': \u0026lt;Tolerance for picking polygons, in pixels (default=4)\u0026gt;, 'resolution': \u0026lt;Resolution in map units per pixel\u0026gt; }    identity (str): User name or Identity dict\n  Return info result as a dict:\n{ 'features': [ { 'id': \u0026lt;feature ID\u0026gt;, # optional 'attributes': [ { 'name': '\u0026lt;attribute name\u0026gt;', 'value': \u0026lt;attribute value\u0026gt; } ], 'bbox': [\u0026lt;minx\u0026gt;, \u0026lt;miny\u0026gt;, \u0026lt;maxx\u0026gt;, \u0026lt;maxy\u0026gt;], # optional 'geometry': '\u0026lt;WKT geometry\u0026gt;' # optional } ] }  See ./info_modules/custom/example/ for a sample implementation of a custom layer info module.\nThe custom info module can then be referenced in the info_template by its name (= directory name) in the service config.\nUsage Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nBase URL:\nhttp://localhost:5015/  Service API:\nhttp://localhost:5015/api/  Sample request:\ncurl 'http://localhost:5015/qwc_demo?layers=countries,edit_points\u0026amp;i=51\u0026amp;j=51\u0026amp;height=101\u0026amp;width=101\u0026amp;bbox=671639%2C5694018%2C1244689%2C6267068\u0026amp;crs=EPSG%3A3857'  Docker usage To run this docker image you will need a PostGIS database and a running QGIS Server.\nThe following steps explain how to download the those services and how to run the qwc-feature-info-service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-feature-info-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-packages .venv  Without system packages:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  "},{"uri":"https://qwc.sourcepole.com/services/","title":"Services","tags":[],"description":"","content":"QWC Services The QWC Services are a collection of microservices providing configurations for and authorized access to different QWC Map Viewer components.\n"},{"uri":"https://qwc.sourcepole.com/services/qwc-fulltext-search-service/","title":"QWC Fulltext Search Service","tags":[],"description":"","content":"Faceted fulltext search and geometry retrieval for search results.\nDependencies  Solr search service  Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nSearch Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/searchConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-fulltext-search-service/master/schemas/qwc-search-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;search\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;solr_service_url\u0026#34;: \u0026#34;http://localhost:8983/solr/gdi/select\u0026#34;, \u0026#34;word_split_re\u0026#34;: \u0026#34;[\\\\s,.:;\\\u0026#34;]+\u0026#34;, \u0026#34;search_result_limit\u0026#34;: 50, \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_geodb\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;facets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;background\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Background\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;foreground\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Map\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ne_10m_admin_0_countries\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Country\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;qwc_geodb.search_v\u0026#34;, \u0026#34;geometry_column\u0026#34;: \u0026#34;geom\u0026#34;, \u0026#34;facet_column\u0026#34;: \u0026#34;subclass\u0026#34; } ] } } Permissions  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;dataproducts\u0026#34;: [ \u0026#34;qwc_demo\u0026#34; ], \u0026#34;solr_facets\u0026#34;: [ \u0026#34;foreground\u0026#34;, \u0026#34;ne_10m_admin_0_countries\u0026#34; ] } }, { \u0026#34;role\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;dataproducts\u0026#34;: [], \u0026#34;solr_facets\u0026#34;: [] } } ] } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\n   Variable Description Default value     SOLR_SERVICE_URL SOLR service URL http://localhost:8983/solr/gdi/select   WORD_SPLIT_RE Word split Regex [\\s,.:;\u0026quot;]+   SEARCH_RESULT_LIMIT Result count limit per search 50   DB_URL DB connection for search geometries view     Solr Setup Solr Administration User Interface: http://localhost:8983/solr/\nCore overview: http://localhost:8983/solr/#/gdi/core-overview\nSolr Ref guide: https://lucene.apache.org/solr/guide/8_0/ Indexing: https://lucene.apache.org/solr/guide/8_0/uploading-structured-data-store-data-with-the-data-import-handler.html#dataimporthandler-commands\nsolr-precreate creates core in /var/solr/data/gdi. After a configuration change remove the content of /var/solr/data e.g. with sudo rm -rf volumes/solr/data/*\ncurl 'http://localhost:8983/solr/gdi/dih_geodata?command=full-import' curl 'http://localhost:8983/solr/gdi/dih_geodata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:austr*' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=full-import\u0026amp;clean=false' curl 'http://localhost:8983/solr/gdi/dih_metadata?command=status' curl 'http://localhost:8983/solr/gdi/select?q=search_1_stem:qwc_demo'  If you encounter permission problems with the solr service then try the following commnad:\nchown 8983:8983 volumes/solr/data  Usage/Development Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nexport CONFIG_PATH=../qwc-docker/demo-config  Overide configurations, if necessary:\nexport SOLR_SERVICE_URL=http://localhost:8983/solr/gdi/select  Configure environment:\necho FLASK_ENV=development \u0026gt;.flaskenv  Start service:\npython server.py  Search base URL:\nhttp://localhost:5011/  Search API:\nhttp://localhost:5011/api/  Examples:\ncurl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries\u0026amp;searchtext=austr' curl 'http://localhost:5011/fts/?filter=foreground,ne_10m_admin_0_countries\u0026amp;searchtext=qwc' curl -g 'http://localhost:5011/geom/ne_10m_admin_0_countries/?filter=[[\u0026quot;ogc_fid\u0026quot;,\u0026quot;=\u0026quot;,90]]'  Docker usage To run this docker image you will need a running Solr search service.\nThe following steps explain how to download the Solr search service docker image and how to run the qwc-data-service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-fulltext-search-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nTesting Run all tests:\npython test.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-legend-service/","title":"QWC Legend Service","tags":[],"description":"","content":"Acts as a proxy between the client and the OGC service for GetLegendGraphic request, allowing to return custom legend graphics instead of the ones generated by the WMS server.\nNote: Requires a QGIS server running on default_qgis_server_url.\nConfiguration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nData Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/legendConfig.json  Example:\n{ \u0026quot;$schema\u0026quot;: \u0026quot;https://raw.githubusercontent.com/qwc-services/qwc-legend-service/v2/schemas/qwc-legend-service.json\u0026quot;, \u0026quot;service\u0026quot;: \u0026quot;legend\u0026quot;, \u0026quot;config\u0026quot;: { // QGIS Server URL \u0026quot;default_qgis_server_url\u0026quot;: \u0026quot;http://localhost:8001/ows/\u0026quot;, // base path to legend images (required if using 'legend_image') \u0026quot;legend_images_path\u0026quot;: \u0026quot;/PATH/TO/LEGENDS/\u0026quot; }, \u0026quot;resources\u0026quot;: { \u0026quot;wms_services\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;qwc_demo\u0026quot;, \u0026quot;root_layer\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;qwc_demo\u0026quot;, \u0026quot;layers\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;edit_demo\u0026quot;, \u0026quot;layers\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;edit_points\u0026quot;, // using custom legend image \u0026quot;legend_image\u0026quot;: \u0026quot;edit_points.png\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;edit_lines\u0026quot;, // using custom legend image in Base64 encoding \u0026quot;legend_image_base64\u0026quot;: \u0026quot;iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAIAAABLbSncAAAAHUlEQVQI12NgwAEYGRgY/tdjiDYyMOHSQQ8JnAAAUUoCDCaibn8AAAAASUVORK5CYII=\u0026quot; }, { // using WMS GetLegendGraphics by default \u0026quot;name\u0026quot;: \u0026quot;edit_polygons\u0026quot; } ] }, { \u0026quot;name\u0026quot;: \u0026quot;geographic_lines\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;country_names\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;states_provinces\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;countries\u0026quot; } ] } } ] } } Note: the legend_image path for custom legend graphics is relative to legend_images_path and may contain subdirectories\nPermissions  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_demo\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_points\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;edit_polygons\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;geographic_lines\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;country_names\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;states_provinces\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;countries\u0026#34; } ] } ] } } ] } Legend images Place your custom legend images in legend_images_path and set the legend_image paths in the layer configurations accordingly.\nTODO: The service accepts a type query-parameter to distinguish three types of legend graphics:\n type=thumbnail: Image for the thumbnails in the QWC2 layer tree type=tooltip: Image for the tooltips when hovering over the thumbnails in the QWC2 layer tree type=default: Default image, i.e. in the legend print or in the layer info dialog  Usage Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nSet the QWC2_PATH environment variable to the path containing your QWC2 production build.\nBase URL:\nhttp://localhost:5014/  API documentation:\nhttp://localhost:5014/api/  Sample request:\nhttp://localhost:5014/qwc_demo?SERVICE=WMS\u0026amp;REQUEST=GetLegendGraphic\u0026amp;LAYER=qwc_demo\u0026amp;format=image/png  Development Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-packages .venv  Without system packages:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt pip install flask_cors  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  "},{"uri":"https://qwc.sourcepole.com/authentication/","title":"Authentication","tags":[],"description":"","content":"Authentication services "},{"uri":"https://qwc.sourcepole.com/services/qwc-permalink-service/","title":"QWC Permalink Service","tags":[],"description":"","content":"Stores and resolves compact permalinks for the Web Client.\nPermalinks are stored in a database table.\nConfiguration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nJSON config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permalinkConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-permalink-service/master/schemas/qwc-permalink-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;permalink\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_configdb\u0026#34;, \u0026#34;permalinks_table\u0026#34;: \u0026#34;qwc_config.permalinks\u0026#34;, \u0026#34;user_permalink_table\u0026#34;: \u0026#34;qwc_config.user_permalinks\u0026#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\n   Variable Default value Description     DB_URL postgresql:///?service=qwc_configdb DB connection URL [1]   PERMALINKS_TABLE qwc_config.permalinks Permalink table   USER_PERMALINK_TABLE qwc_config.user_permalinks User permalink table    If you don\u0026rsquo;t use qwc-config-db you have to create the tables for storing permalinks first. Example:\nCREATE TABLE permalinks ( key character(10) NOT NULL PRIMARY KEY, data text, date date );  Usage Base URL:\nhttp://localhost:5018/  API documentation:\nhttp://localhost:5018/api/  Docker usage To run this docker image you will need a configuration database. For testing purposes you can use the demo DB.\nThe following steps explain how to download the demo DB docker image and how to run the qwc-permalink-service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-permalink-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nexport CONFIG_PATH=../qwc-docker/demo-config  Configure environment:\necho FLASK_ENV=development \u0026gt;.flaskenv  Start local service:\npython server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-print-service/","title":"QWC Print service","tags":[],"description":"","content":"Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nJSON config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/printConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-print-service/master/schemas/qwc-print-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;print\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;ogc_service_url\u0026#34;: \u0026#34;http://localhost:5013/ows/\u0026#34;, \u0026#34;qgis_server_version\u0026#34;: \u0026#34;3.4.1\u0026#34;, \u0026#34;print_pdf_filename\u0026#34;: \u0026#34;qwc.pdf\u0026#34;, \u0026#34;label_queries\u0026#34;: [ { \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=fachdaten\u0026#34;, \u0026#34;query\u0026#34;: \u0026#34;SELECT \u0026#39;Bearbeiter/in: \u0026#39; || vorname || \u0026#39; \u0026#39; || nachname FROM benutzer WHERE username = $username$\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;NAME\u0026#34; ] } ] }, \u0026#34;resources\u0026#34;: { \u0026#34;print_templates\u0026#34;: [ { \u0026#34;template\u0026#34;: \u0026#34;A4 hoch\u0026#34; } ] } } label_queries is a configuration for additional query parameters to inject into the WMS GetPrint request.\nThe contents is expected to be\n{ \u0026quot;label_queries\u0026quot;: [{ \u0026quot;db_url\u0026quot;: \u0026quot;\u0026lt;db_url\u0026gt;\u0026quot;, \u0026quot;query\u0026quot;: \u0026quot;\u0026lt;query\u0026gt;\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;\u0026lt;ParamName1\u0026gt;\u0026quot;, ...] },{ ... }], }  where:\n query is an arbitrary query, returning exactly one row. The $username$ placeholder can be used to inject the current username. params is an array of parameter names to inject. The same number of parameters as number of returned values by the query must be specified.  Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\n   Variable Description     OGC_SERVICE_URL OGC Service URL   QGIS_SERVER_VERSION QGIS Server version (e.g. 2.18.19, 3.4.1)    Development Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nexport CONFIG_PATH=../qwc-docker/demo-config  Configure environment:\necho FLASK_ENV=development \u0026gt;.flaskenv  Start local service:\npython server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-mapinfo-service/","title":"QWC MapInfo Service","tags":[],"description":"","content":"Additional information at a geographic position displayed with right mouse click on map.\nConfiguration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nMapInfo Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/mapinfoConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-mapinfo-service/master/schemas/qwc-mapinfo-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;mapinfo\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_geodb\u0026#34;, \u0026#34;info_table\u0026#34;: \u0026#34;qwc_geodb.ne_10m_admin_0_countries\u0026#34;, \u0026#34;info_geom_col\u0026#34;: \u0026#34;wkb_geometry\u0026#34;, \u0026#34;info_display_col\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;info_title\u0026#34;: \u0026#34;Country\u0026#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\n   Variable Description     INFO_TABLE Table to use   INFO_GEOM_COL Geometry column in table   INFO_DISPLAY_COL Display text column in table   INFO_TITLE Display title    Usage Run as\npython server.py  API documentation:\nhttp://localhost:5016/api/  Docker usage To run this docker image you will need a PostGIS database. For testing purposes you can use the demo DB.\nThe following steps explain how to download the demo DB docker image and how to run the qwc-mapinfo-service service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-mapinfo-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  Testing Run all tests:\npython test.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-data-service/","title":"QWC Data Service","tags":[],"description":"","content":"Edit spatial and unlocated features of datasets via GeoJSON.\nNote: requires a PostGIS database for reading and writing features\nSetup Uses PostgreSQL connection service or connection to a PostGIS database. This connection\u0026rsquo;s user requires read and write access to the configured tables.\nqwc_demo example Uses PostgreSQL connection service qwc_geodb (GeoDB). The user qwc_service_write requires read and write access to the configured tables of the data layers from the QGIS project qwc_demo.qgs.\nSetup PostgreSQL connection service file ~/.pg_service.conf:\nhost=localhost port=5439 dbname=qwc_demo user=qwc_service_write password=qwc_service_write sslmode=disable Configuration The static config and permission files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nData Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/dataConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-data-service/v2/schemas/qwc-data-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;attachments_base_dir\u0026#34;: \u0026#34;/tmp/qwc_attachments/\u0026#34;, \u0026#34;allowed_attachment_extensions\u0026#34;: \u0026#34;.bmp,.jpg,.pdf\u0026#34;, \u0026#34;max_attachment_file_size\u0026#34;: 10485760, \u0026#34;upload_user_field_suffix\u0026#34;: \u0026#34;uploaduser\u0026#34;, \u0026#34;edit_user_field\u0026#34;: \u0026#34;edituser\u0026#34;, \u0026#34;edit_timestamp_field\u0026#34;: \u0026#34;edittimestamp\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;datasets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo.edit_points\u0026#34;, \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_geodb\u0026#34;, \u0026#34;schema\u0026#34;: \u0026#34;qwc_geodb\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;edit_points\u0026#34;, \u0026#34;primary_key\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;min\u0026#34;: -2147483648, \u0026#34;max\u0026#34;: 2147483647 } }, { \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;character varying\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;maxlength\u0026#34;: 32 } }, { \u0026#34;name\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;text\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;num\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;min\u0026#34;: -2147483648, \u0026#34;max\u0026#34;: 2147483647 } }, { \u0026#34;name\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;double precision\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;pattern\u0026#34;: \u0026#34;[0-9]+([\\\\.,][0-9]+)?\u0026#34; } }, { \u0026#34;name\u0026#34;: \u0026#34;type\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;smallint\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;min\u0026#34;: -32768, \u0026#34;max\u0026#34;: 32767 } }, { \u0026#34;name\u0026#34;: \u0026#34;amount\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;numeric\u0026#34;, \u0026#34;constraints\u0026#34;: { \u0026#34;numeric_precision\u0026#34;: 5, \u0026#34;numeric_scale\u0026#34;: 2, \u0026#34;min\u0026#34;: -999.99, \u0026#34;max\u0026#34;: 999.99, \u0026#34;step\u0026#34;: 0.01 } }, { \u0026#34;name\u0026#34;: \u0026#34;validated\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;datetime\u0026#34;, \u0026#34;data_type\u0026#34;: \u0026#34;timestamp without time zone\u0026#34; } ], \u0026#34;geometry\u0026#34;: { \u0026#34;geometry_column\u0026#34;: \u0026#34;geom\u0026#34;, \u0026#34;geometry_type\u0026#34;: \u0026#34;POINT\u0026#34;, \u0026#34;srid\u0026#34;: 3857 } } ] } } Permissions  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/permissions.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-services-core/master/schemas/qwc-services-permissions.json\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;demo\u0026#34;], \u0026#34;roles\u0026#34;: [] } ], \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;roles\u0026#34;: [\u0026#34;demo\u0026#34;] } ], \u0026#34;roles\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;data_datasets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;qwc_demo.edit_points\u0026#34;, \u0026#34;attributes\u0026#34;: [ \u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;num\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;amount\u0026#34;, \u0026#34;validated\u0026#34;, \u0026#34;datetime\u0026#34; ], \u0026#34;writable\u0026#34;: true, \u0026#34;creatable\u0026#34;: true, \u0026#34;readable\u0026#34;: true, \u0026#34;updatable\u0026#34;: true, \u0026#34;deletable\u0026#34;: true } ] } } ] } Overview  QWC2 build: Public: +--------------------+ +------------+ | themesConfig.json | | | | ^ +-----------\u0026gt; yarn build +----------------------------------\u0026gt; (themes.json) | | | +---\u0026gt; | | + +-----+ | +------------+ +---------------+ | (edit.json) | | | | | +--------------------+ | +------------------------+ QGIS Server +----------\u0026gt; WMS/WFS | | Capabilities | | +--------------------+ | | +------^--------+ | ui Files +-----------------------------------------------------------\u0026gt; assets/*.ui +--------------------+ | | | | | | +------------------+ +--------------------+ | | + | +--\u0026gt; html/js/css/assets | qgs Files +--+-------------------------------\u0026gt; *.qgs +---------\u0026gt; qwc-map-viewer | +--------------------+ | | | | | +--\u0026gt; config.json/themes.json | | | | +------------------+ | | | | | | | | +------------------+ | | | | | | REST-API +---------+ | | | +---------\u0026gt; qwc-data-service \u0026lt;---------------\u0026gt; | | | | | +------------+ | | | | config- | | | +---\u0026gt; | + +------------------+ | DB | +-------v--v-----\u0026gt; Config- +------\u0026gt; [service].json+permissions.json | | | Generator | | | | | +---------+ +------------+  Edit forms:\n  Edit forms are automatically created from field information extracted from QGS files, according to the attribute form configuration:\n For autogenerated attribute forms, a flat edit form is in QWC2 Drag and Drop designer forms are automatically translated to Qt Designer forms in the assets/forms/autogen and loaded by QWC2 UI file are copied to the assets/forms/autogen folder and loaded by QWC2    You can also manually create Qt Designer forms to use exclusively with QWC2 as follows:\n  For the desired theme, add a block as follows in the theme block of the tenantConfig.json:\n\u0026quot;editConfig\u0026quot;:{ \u0026quot;\u0026lt;layername\u0026gt;\u0026quot;:{ \u0026quot;editDataset\u0026quot;:\u0026quot;\u0026lt;mapprefix\u0026gt;.\u0026lt;datasetname\u0026gt;\u0026quot;, \u0026quot;layerName\u0026quot;:\u0026quot;\u0026lt;Display name\u0026gt;\u0026quot;, \u0026quot;geomType\u0026quot;:\u0026quot;\u0026lt;Point|LineString|Polygon\u0026gt;\u0026quot;, \u0026quot;form\u0026quot;:\u0026quot;:/forms/form.ui\u0026quot; } }  Note: :/ in the form property is resolved to the assets directory of the viewer.\n  Create the designer form in Qt-Designer, using the dataset field names as edit widget names.\n    Note: In general, for tables with an auto-incrementing primary key field, you\u0026rsquo;ll want to set the attribute form widget type to \u0026ldquo;Hidden\u0026rdquo; in the QGIS layer properties. This way, the data-service won\u0026rsquo;t block the commit if the feature is comitted with an empty PK field value.\n  Logging the user/timestamp of a mutation:\n If you set edit_user_field in the data service config, the username of the last user who performed a mutation to a record with be logged to the \u0026lt;edit_user_field\u0026gt; field of the record. If you set edit_timestamp_field in the data service config, the timestamp of the last mutation to a record will be logged to the \u0026lt;edit_timestamp_field\u0026gt; field of the record.  File uploads:\n For autogenerated edit forms, in QGIS create a virtual field named \u0026lt;fieldname\u0026gt;__upload for the desired layer. \u0026lt;fieldname\u0026gt; must be equal to an existing field of the dataset of type string. As field expression, you can set a string '\u0026lt;extensions\u0026gt;', with \u0026lt;extensions\u0026gt; a comma separated list of suggested file extensions, i.e. .png,.jpg. For Drag and Drop designer forms, set the widget type to Attachment. For manually created Qt Designed Ui forms, use a QLineEdit widget named \u0026lt;fieldname\u0026gt;__upload, and optionally as the text value of the QLineEdit set a comma separated list of suggested file extensions. Note: Make sure the client uses the EditingInterface.js shipped with QWC2 submodule f053fdc or newer to support file uploads.  If you set upload_user_field_suffix in the data service config, the username of the last user who performed an upload to \u0026lt;fieldname\u0026gt; will be logged to \u0026lt;fieldname\u0026gt;__\u0026lt;upload_user_field_suffix\u0026gt;. You can set the respective field types to hidden in the QGIS layer properties to avoid them showing up in the autogenerated edit forms.\n1:N relations:\n Note: 1:N relations are currently only supported in manually created Qt-Designed Ui forms. In your Ui form, create a QWidget named according to the pattern nrel__\u0026lt;reltablename\u0026gt;__\u0026lt;foreignkeyfield\u0026gt;, where \u0026lt;reltablename\u0026gt; is the name of the relation table and \u0026lt;foreignkeyfield\u0026gt; the name of the foreign key field in the relation table. Inside this widget, add the edit widgets for the values of the relation table. Name the widgets \u0026lt;reltablename\u0026gt;__\u0026lt;fieldname\u0026gt;. These edit widgets will be replicated for each relation record. Note: The relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend.  Key-value relations:\n For Drag and Drop designer forms, use widgets of type Value Relation. In the generated designer form, the naming convention indicated below is used. In a manually created Qt-Designer Ui form, you can use key-value relations for combo box entries by naming the QComboBox widget according to the following pattern: kvrel__\u0026lt;fieldname\u0026gt;__\u0026lt;kvtablename\u0026gt;__\u0026lt;kvtable_valuefield\u0026gt;__\u0026lt;kvtable_labelfield\u0026gt;. \u0026lt;kvtablename\u0026gt; refers to a table containing a field called \u0026lt;kvtable_valuefield\u0026gt; for the value of the entry and a field \u0026lt;kvtable_labelfield\u0026gt; for the label of the entry. For key-value relations inside a 1:N relation, use kvrel__\u0026lt;reltablename\u0026gt;__\u0026lt;fieldname\u0026gt;__\u0026lt;kvtablename\u0026gt;__\u0026lt;kvtable_valuefield\u0026gt;__\u0026lt;kvtable_labelfield\u0026gt;. \u0026lt;kvtablename\u0026gt; Note: In any case, the relation table needs to be added as a (geometryless) table to the QGIS Project. You also need to set appropriate permissions for the relation table dataset in the QWC admin backend.  Data service configuration:\n DB connection information, table and column names and primary key information are extracted from QGS files Data contraints are extracted from QGS files Column types and additional constraints are read from the the geo-DB  Data read/write:\n QWC2 issues data-service API requests for reading und writing  Usage Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nBase URL:\nhttp://localhost:5012/  Service API:\nhttp://localhost:5012/api/  Sample requests:\ncurl 'http://localhost:5012/qwc_demo.edit_points/'  Docker usage To run this docker image you will need a PostGIS database. For testing purposes you can use the demo DB.\nThe following steps explain how to download the demo DB docker image and how to run the qwc-data-service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-data-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-packages .venv  Without system packages:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  Testing Run all tests:\npython test.py  Run single test module:\npython -m unittest tests.feature_validation_tests  Run single test case:\npython -m unittest tests.feature_validation_tests.FeatureValidationTestCase  Run single test method:\npython -m unittest tests.feature_validation_tests.FeatureValidationTestCase.test_field_constraints  "},{"uri":"https://qwc.sourcepole.com/services/qwc-document-service/","title":"Document service","tags":[],"description":"","content":"The document service delivers reports from the Jasper reporting service with permission control.\nDependencies  Jasper reporting service  Configuration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nJSON config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/documentConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-document-service/master/schemas/qwc-document-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;document\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;jasper_service_url\u0026#34;: \u0026#34;http://localhost:8002/reports\u0026#34;, \u0026#34;jasper_timeout\u0026#34;: 60 }, \u0026#34;resources\u0026#34;: { \u0026#34;document_templates\u0026#34;: [ { \u0026#34;template\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;report_filename\u0026#34;: \u0026#34;PieChartReport\u0026#34; } ] } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\nEnvironment variables:\n   Variable Description Default value     JASPER_SERVICE_URL Jasper Reports service URL http://localhost:8002/reports   JASPER_TIMEOUT Timeout (s) 60    Usage API documentation:\nhttp://localhost:5018/api/  Request format:\nhttp://localhost:5018/\u0026lt;template\u0026gt;?\u0026lt;key\u0026gt;=\u0026lt;value\u0026gt;\u0026amp;...  Example:\nhttp://localhost:5018/BelasteteStandorte.pdf  Arbitrary parameters can be appended to the request:\nhttp://localhost:5018/BelasteteStandorte.pdf?feature=123  The format of the report is extracted from the template name, i.e.\nhttp://localhost:5018/BelasteteStandorte.xls?feature=123  If no extension is present in the template name, PDF is used as format.\nSee also jasper-reporting-service README.\nDocker usage To run this docker image you will need a running jasper reporting service.\nThe following steps explain how to download a jasper reporting service docker image and how to run the qwc-document-service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Start docker containers\ndocker-compose up qwc-document-service  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nCONFIG_PATH=/PATH/TO/CONFIGS/ python server.py  Testing Run all tests:\npython test.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-elevation-service/","title":"QWC Elevation Service","tags":[],"description":"","content":"Returns elevations.\nConfiguration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nElevation Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/elevationConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-elevation-service/master/schemas/qwc-elevation-service.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;elevation\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;elevation_dataset\u0026#34;: \u0026#34;/vsicurl/https://data.sourcepole.com/srtm_1km_3857.tif\u0026#34; } } Environment variables Config options in the config file can be overridden by equivalent uppercase environment variables.\n   Variable Description     ELEVATION_DATASET path/to/dtm.tif    Usage Run as\npython server.py  Requires GDAL Python bindings. python-gdal or python3-gdal packages on Debian/Ubuntu (Note: virtualenv creation requires \u0026ndash;system-site-packages option).\nAPI:\n Runs by default on http://localhost:5002 GET: /getelevation?pos=\u0026lt;pos\u0026gt;\u0026amp;crs=\u0026lt;crs\u0026gt;  pos: the query position, as x,y crs: the crs of the query position output: a json document with the elevation in meters: {elevation: h}   POST: /getheightprofile   payload: a json document as follows:\n{ coordinates: [[x1,y1],[x2,y2],...], distances: [\u0026lt;dist_p1_p2\u0026gt;, \u0026lt;dist_p2_p3\u0026gt;, ...], projection: \u0026lt;EPSG:XXXX, projection of coordinates\u0026gt;, samples: \u0026lt;number of height samples to return\u0026gt; }    output: a json document with heights in meters: {elevations: [h1, h2, ...]}\n    Docker usage The docker image can be run with the following command:\ndocker run -p 5002:9090 sourcepole/qwc-elevation-service     docker parameters Description     -p 5002:9090 Bind port 5002 on the host machine    "},{"uri":"https://qwc.sourcepole.com/services/qwc-admin-gui/","title":"QWC Admin GUI","tags":[],"description":"","content":"GUI for administration of QWC Services.\n manage users, groups and roles define QWC resources and assign permissions define registrable groups and manage group registration requests  Note: requires a QWC ConfigDB\nConfiguration The static config files are stored as JSON files in $CONFIG_PATH with subdirectories for each tenant, e.g. $CONFIG_PATH/default/*.json. The default tenant name is default.\nAdmin Gui Service config  JSON schema File location: $CONFIG_PATH/\u0026lt;tenant\u0026gt;/adminGuiConfig.json  Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://raw.githubusercontent.com/qwc-services/qwc-admin-gui/master/schemas/qwc-admin-gui.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;admin-gui\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_configdb\u0026#34;, \u0026#34;config_generator_service_url\u0026#34;: \u0026#34;http://qwc-config-service:9090\u0026#34;, \u0026#34;totp_enabled\u0026#34;: false, \u0026#34;user_info_fields\u0026#34;: [], \u0026#34;proxy_url_whitelist\u0026#34;: [], \u0026#34;proxy_timeout\u0026#34;: 60 } } To connect with the demo database, the following ~/.pg_service.conf entry is expected:\nhost=localhost port=5439 dbname=qwc_demo user=qwc_admin password=qwc_admin sslmode=disable Set the GROUP_REGISTRATION_ENABLED environment variable to False to disable registrable groups and group registration requests, if not using the Registration GUI (default: True).\nTo automatically logout from the admin gui after a period of inactivity, set the IDLE_TIMEOUT environment variable to the desired period, in seconds (default: 0, i.e. disabled).\nSet totp_enabled to true to show the TOTP fields in the user form, if two factor authentication is enabled in the DB-Auth service (default: false).\nAdditional user fields Additional user fields are saved in the table qwc_config.user_infos with a a one-to-one relation to qwc_config.users via the user_id foreign key. To add custom user fields, add new columns to your qwc_config.user_infos table and set your user_info_fields to a JSON with the following structure:\n{ \u0026#34;title\u0026#34;: \u0026#34;\u0026lt;field title\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;column name\u0026gt;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;\u0026lt;field type (text|textarea|integer, default: text)\u0026gt;\u0026#34;, \u0026#34;required\u0026#34; \u0026#34;\u0026lt;whether field is required (true|false, default: false)\u0026gt;\u0026#34; } ] These fields are then added to the user form.\nExample:\n-- add custom columns ALTER TABLE qwc_config.user_infos ADD COLUMN surname character varying NOT NULL; ALTER TABLE qwc_config.user_infos ADD COLUMN first_name character varying NOT NULL; # set user info fields config \u0026#34;user_info_fields\u0026#34;: [{\u0026#34;title\u0026#34;: \u0026#34;Surname\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;surname\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;required\u0026#34;: true}, {\u0026#34;title\u0026#34;: \u0026#34;First name\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;first_name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;required\u0026#34;: true}] Mailer  MAIL_SERVER: default ‘localhost’ MAIL_PORT: default 25 MAIL_USE_TLS: default False MAIL_USE_SSL: default False MAIL_DEBUG: default app.debug MAIL_USERNAME: default None MAIL_PASSWORD: default None MAIL_DEFAULT_SENDER: default None MAIL_MAX_EMAILS: default None MAIL_SUPPRESS_SEND: default app.testing MAIL_ASCII_ATTACHMENTS: default False  In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests.\nProxy to internal services The route /proxy?url=http://example.com/path?a=1 serves as a proxy for calling whitelisted internal services. This can be used e.g. to call other internal services from custom pages in the Admin GUI, without having to expose those services externally.\nSet proxy_url_whitelist to a list of RegExes for whitelisted URLs (default: []), e.g.\n[\u0026#34;\u0026lt;RegEx pattern for full URL from proxy request\u0026gt;\u0026#34;, \u0026#34;^http://example.com/path\\\\?.*$\u0026#34;] Set proxy_timeout to the timeout in seconds for proxy requests (default: 60s).\nTranslations Translation strings are stored in a JSON file for each locale in translations/\u0026lt;locale\u0026gt;.json (e.g. en.json). Add any new languages as new JSON files.\nSet the DEFAULT_LOCALE environment variable to choose the locale for the user notification mails (default: en).\nPlugins The admin gui is extendable through plugins, which reside in the plugins folder. To enable them, list them in plugins in the admin gui configuration. See the JSON schema for details, and for configuration parameters which may be required by plugins shipped by default with qwc-admin-gui.\nUsage Base URL:\nhttp://localhost:5031/  Default login username: admin password: admin\nDocker usage To run this docker image you will need a configuration database. For testing purposes you can use the demo DB.\nThe following steps explain how to download the demo DB docker image and how to run the qwc-admin-gui service with docker-compose.\nStep 1: Clone qwc-docker\ngit clone https://github.com/qwc-services/qwc-docker cd qwc-docker  Step 2: Create docker-compose.yml file\ncp docker-compose-example.yml docker-compose.yml  Step 3: Set flask debug mode to true\nFor the QWC Admin GUI to work without login you will have to add the following env variable:\nFLASK_DEBUG=1  Step 4: Start docker containers\ndocker-compose up qwc-admin-gui  For more information please visit: https://github.com/qwc-services/qwc-docker\nDevelopment Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Set the CONFIG_PATH environment variable to the path containing the service config and permission files when starting this service (default: config).\nexport CONFIG_PATH=../qwc-docker/demo-config  Configure environment:\necho FLASK_ENV=development \u0026gt;.flaskenv  Start local service:\n python server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-registration-gui/","title":"Registration GUI","tags":[],"description":"","content":"Provides an application form, so users can submit group membership requests.\nThese membership requests can then be approved or declined by an admin user in the QWC configuration backend.\nSetup Uses PostgreSQL connection service qwc_configdb (ConfigDB).\nSetup PostgreSQL connection service file pg_service.conf:\nhost=localhost port=5439 dbname=qwc_demo user=qwc_admin password=qwc_admin sslmode=disable Place this file in your home directory, or set the PGSERVICEFILE environment variable to point to the file.\nConfiguration Mailer Set the ADMIN_RECIPIENTS environment variable to a comma separated list of admin users who should be notified of new registration requests (default: None).\n MAIL_SERVER: default ‘localhost’ MAIL_PORT: default 25 MAIL_USE_TLS: default False MAIL_USE_SSL: default False MAIL_DEBUG: default app.debug MAIL_USERNAME: default None MAIL_PASSWORD: default None MAIL_DEFAULT_SENDER: default None MAIL_MAX_EMAILS: default None MAIL_SUPPRESS_SEND: default app.testing MAIL_ASCII_ATTACHMENTS: default False  In addition the standard Flask TESTING configuration option is used by Flask-Mail in unit tests.\nTranslations Translation strings are stored in a JSON file for each locale in translations/\u0026lt;locale\u0026gt;.json (e.g. en.json). Add any new languages as new JSON files.\nSet the DEFAULT_LOCALE environment variable to choose the locale for the application form and notifications (default: en).\nUsage Run standalone application:\npython server.py  Registration form (if user is signed in):\nhttp://localhost:5032/register  Development Install Python module for PostgreSQL:\napt-get install python3-psycopg2  Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements:\npip install -r requirements.txt  Start local service:\nMAIL_SUPPRESS_SEND=True MAIL_DEFAULT_SENDER=from@example.com ADMIN_RECIPIENTS=admin@example.com python server.py  "},{"uri":"https://qwc.sourcepole.com/services/qwc-config-generator/","title":"QWC Config Generator","tags":[],"description":"","content":"Generate JSON files for service configs and permissions from WMS GetCapabilities, QGS projects and QWC ConfigDB.\nSetup Create a ConfigGenerator config file tenantConfig.json for each tenant (see below).\nConfiguration Example tenantConfig.json:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://github.com/qwc-services/qwc-config-generator/raw/master/schemas/qwc-config-generator.json\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;config-generator\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;tenant\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;config_db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_configdb\u0026#34;, \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://localhost:8001/ows/\u0026#34;, \u0026#34;qgis_projects_base_dir\u0026#34;: \u0026#34;/data\u0026#34;, \u0026#34;permissions_default_allow\u0026#34;: true }, \u0026#34;themesConfig\u0026#34;: { \u0026#34;defaultScales\u0026#34;: [100000000, 50000000, 25000000, 10000000, 4000000, 2000000, 1000000, 400000, 200000, 80000, 40000, 20000, 10000, 8000, 6000, 4000, 2000, 1000, 500, 250, 100], \u0026#34;defaultPrintGrid\u0026#34;: [{\u0026#34;s\u0026#34;: 10000000, \u0026#34;x\u0026#34;: 1000000, \u0026#34;y\u0026#34;: 1000000}, {\u0026#34;s\u0026#34;: 1000000, \u0026#34;x\u0026#34;: 100000, \u0026#34;y\u0026#34;: 100000}, {\u0026#34;s\u0026#34;: 100000, \u0026#34;x\u0026#34;: 10000, \u0026#34;y\u0026#34;: 10000}, {\u0026#34;s\u0026#34;: 10000, \u0026#34;x\u0026#34;: 1000, \u0026#34;y\u0026#34;: 1000}, {\u0026#34;s\u0026#34;: 1000, \u0026#34;x\u0026#34;: 100, \u0026#34;y\u0026#34;: 100}, {\u0026#34;s\u0026#34;: 100, \u0026#34;x\u0026#34;: 10, \u0026#34;y\u0026#34;: 10}], \u0026#34;defaultWMSVersion\u0026#34;:\u0026#34;1.3.0\u0026#34;, \u0026#34;defaultBackgroundLayers\u0026#34;: [], \u0026#34;defaultSearchProviders\u0026#34;: [\u0026#34;coordinates\u0026#34;], \u0026#34;defaultMapCrs\u0026#34;: \u0026#34;EPSG:3857\u0026#34;, \u0026#34;themes\u0026#34;: { \u0026#34;items\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Demo\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/ows/qwc_demo\u0026#34;, \u0026#34;default\u0026#34;: true, \u0026#34;attribution\u0026#34;: \u0026#34;Demo attribution\u0026#34;, \u0026#34;attributionUrl\u0026#34;: \u0026#34;https://127.0.0.1/\u0026#34;, \u0026#34;backgroundLayers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bluemarble\u0026#34;, \u0026#34;printLayer\u0026#34;: \u0026#34;bluemarble_bg\u0026#34;, \u0026#34;visibility\u0026#34;: true }, { \u0026#34;name\u0026#34;: \u0026#34;mapnik\u0026#34;, \u0026#34;printLayer\u0026#34;: \u0026#34;osm_bg\u0026#34; } ], \u0026#34;searchProviders\u0026#34;: [\u0026#34;coordinates\u0026#34;], \u0026#34;mapCrs\u0026#34;: \u0026#34;EPSG:3857\u0026#34;, \u0026#34;additionalMouseCrs\u0026#34;: [], \u0026#34;extent\u0026#34;: [-1000000, 4000000, 3000000, 8000000], \u0026#34;skipEmptyFeatureAttributes\u0026#34;: true, \u0026#34;printResolutions\u0026#34;: [300], \u0026#34;thumbnail\u0026#34;: \u0026#34;default.jpg\u0026#34; } ], \u0026#34;backgroundLayers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;mapnik\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Open Street Map\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;osm\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;osm\u0026#34;, \u0026#34;thumbnail\u0026#34;: \u0026#34;mapnik.jpg\u0026#34;, \u0026#34;attribution\u0026#34;: \u0026#34;OpenStreetMap contributors\u0026#34;, \u0026#34;attributionUrl\u0026#34;: \u0026#34;https://www.openstreetmap.org/copyright\u0026#34; } ] } }, \u0026#34;custom_resource_types\u0026#34;: [], \u0026#34;services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ogc\u0026#34;, \u0026#34;generator_config\u0026#34;: { \u0026#34;wms_services\u0026#34;: { \u0026#34;online_resources\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;http://localhost:8088/ows/\u0026#34;, \u0026#34;feature_info\u0026#34;: \u0026#34;http://localhost:8088/ows/\u0026#34;, \u0026#34;legend\u0026#34;: \u0026#34;http://localhost:8088/ows/\u0026#34; } } }, \u0026#34;config\u0026#34;: { \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://qwc-qgis-server/ows/\u0026#34; } }, { \u0026#34;name\u0026#34;: \u0026#34;mapViewer\u0026#34;, \u0026#34;generator_config\u0026#34;: { \u0026#34;qwc2_config\u0026#34;: { \u0026#34;qwc2_config_file\u0026#34;: \u0026#34;../qwc-docker/volumes/qwc2/config.json\u0026#34;, \u0026#34;qwc2_index_file\u0026#34;: \u0026#34;../qwc-docker/volumes/qwc2/index.html\u0026#34; } }, \u0026#34;config\u0026#34;: { \u0026#34;qwc2_path\u0026#34;: \u0026#34;/qwc2/\u0026#34;, \u0026#34;auth_service_url\u0026#34;: \u0026#34;/auth/\u0026#34;, \u0026#34;data_service_url\u0026#34;: \u0026#34;/api/v1/data/\u0026#34;, \u0026#34;#document_service_url\u0026#34;: \u0026#34;/api/v1/document/\u0026#34;, \u0026#34;elevation_service_url\u0026#34;: \u0026#34;/elevation/\u0026#34;, \u0026#34;#info_service_url\u0026#34;: \u0026#34;/api/v1/featureinfo/\u0026#34;, \u0026#34;#legend_service_url\u0026#34;: \u0026#34;/api/v1/legend/\u0026#34;, \u0026#34;mapinfo_service_url\u0026#34;: \u0026#34;/api/v1/mapinfo/\u0026#34;, \u0026#34;ogc_service_url\u0026#34;: \u0026#34;/ows/\u0026#34;, \u0026#34;permalink_service_url\u0026#34;: \u0026#34;/api/v1/permalink/\u0026#34;, \u0026#34;#print_service_url\u0026#34;: \u0026#34;/api/v1/print/\u0026#34;, \u0026#34;search_data_service_url\u0026#34;: \u0026#34;/api/v1/data/\u0026#34;, \u0026#34;search_service_url\u0026#34;: \u0026#34;/api/v2/search/\u0026#34; } }, { \u0026#34;name\u0026#34;: \u0026#34;featureInfo\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://qwc-qgis-server/ows/\u0026#34; } }, { \u0026#34;name\u0026#34;: \u0026#34;search\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;solr_service_url\u0026#34;: \u0026#34;http://qwc-solr:8983/solr/gdi/select\u0026#34;, \u0026#34;search_result_limit\u0026#34;: 50, \u0026#34;db_url\u0026#34;: \u0026#34;postgresql:///?service=qwc_geodb\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;facets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;background\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Background\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;foreground\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Map\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ne_10m_admin_0_countries\u0026#34;, \u0026#34;filter_word\u0026#34;: \u0026#34;Country\u0026#34;, \u0026#34;table_name\u0026#34;: \u0026#34;qwc_geodb.search_v\u0026#34;, \u0026#34;geometry_column\u0026#34;: \u0026#34;geom\u0026#34;, \u0026#34;facet_column\u0026#34;: \u0026#34;subclass\u0026#34; } ] }, \u0026#34;permissions\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;dataproducts\u0026#34;: [ \u0026#34;qwc_demo\u0026#34; ], \u0026#34;solr_facets\u0026#34;: [ \u0026#34;foreground\u0026#34;, \u0026#34;ne_10m_admin_0_countries\u0026#34; ] } } ] } ] } For a full example see tenantConfig-example.json (JSON schema).\nNOTE: the QWC2 themes config is defined under themesConfig in the ConfigGenerator config and not in a separate file.\nQGIS projects can be automatically detected when qgis_projects_scan_base_dir is defined. For adding these projects, the following settings need to be defined in themesConfig.\n defaultBackgroundLayers defaultSearchProviders defaultMapCrs  Additionally the config generator can also autodetect thumbnails when adding projects that meet the following criteria:\n qwc2_base_dir is defined in the ConfigGenerator config the thumbnail of the project is located in the QWC2 thumbnail directory (Example: /qwc/assets/img/mapthumbs) the thumbnail image has the same filename as the QGIS project  The config generator also has the ability to split a layer, that has been classified with QGIS, into multiple layers and move them into a new group (The group name will be the original layer name). The following steps need to be done, to activate this functionality:\n  Set ConfigGenerator config: \u0026quot;split_categorized_layers\u0026quot;: true\n  Define the environment variable QGIS_APPLICATION_PREFIX_PATH (default: /usr). The prefix path is the location where QGIS is installed on your system. This is needed by the split function, because it uses the qgis.core library.\n  NOTE: The Search service config takes its resources directly from the ConfigGenerator config. Its Permissions are collected from the ConfigDB (solr_facet resources), unless they are defined in the ConfigGenerator config.\nNOTE: the FeatureInfo service config may take additional WMS service resources and permissions directly from the ConfigGenerator config, e.g. for external info layers. Its Permissions are collected from the ConfigDB (feature_info_service, feature_info_layer resources), unless they are defined in the ConfigGenerator config. Example:\n{ \u0026#34;name\u0026#34;: \u0026#34;featureInfo\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;default_qgis_server_url\u0026#34;: \u0026#34;http://qwc-qgis-server/ows/\u0026#34; }, \u0026#34;resources\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;external_info_layers\u0026#34;, \u0026#34;root_layer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;external_info_layers\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;example_info_layer\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;External info layer\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;geometry\u0026#34; } ], \u0026#34;info_template\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;wms\u0026#34;, \u0026#34;wms_url\u0026#34;: \u0026#34;https://example.com/wms/demo\u0026#34; } } ] } } ] }, \u0026#34;permissions\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;permissions\u0026#34;: { \u0026#34;wms_services\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;external_info_layers\u0026#34;, \u0026#34;layers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;external_info_layers\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;example_info_layer\u0026#34;, \u0026#34;attributes\u0026#34;: [\u0026#34;name\u0026#34;, \u0026#34;geometry\u0026#34;], \u0026#34;info_template\u0026#34;: true } ] } ] } } ] } Permissions Using the permissions_default_allow setting, some resources can be set to be permitted or restricted by default if no permissions are set (default: true). Affected resources are map, layer, print_template and viewer_task.\n i.e. permissions_default_allow: true: all maps, layers and attributes are permitted by default i.e. permissions_default_allow: false: maps and layers are only available if their resources and permissions are explicitly configured; though attributes are still permitted by default  Custom resource types If you want to define custom resource types for a custom service, you can add a record for the resource type to the configdb\nINSERT INTO qwc_config.resource_types(name, description, list_order) values ('\u0026lt;resource_name\u0026gt;', '\u0026lt;resource_description\u0026gt;', \u0026lt;list_order\u0026gt;);  and then add it to the custom_resource_types setting.\nUsage Script Show command options:\npython config_generator_cli.py --help  Generate both service configs and permissions:\npython config_generator_cli.py ./tenantConfig.json all  Generate service config files:\npython config_generator_cli.py ./tenantConfig.json service_configs  Generate permissions file:\npython config_generator_cli.py ./tenantConfig.json permissions  Service Set the INPUT_CONFIG_PATH environment variable to the base dir for reading generator config files (default: config-in/). Set the OUTPUT_CONFIG_PATH environment variable to the base dir for writing service configs and permissions (default: /tmp/).\nNOTE: Requires write permissions for config-generator docker user (www-data) in OUTPUT_CONFIG_PATH for writing service configs and permissions.\nBase URL:\nhttp://localhost:5010/  Generate both service configs and permissions for default tenant:\ncurl -X POST \u0026quot;http://localhost:5010/generate_configs?tenant=default\u0026quot;  Development Create a virtual environment:\nvirtualenv --python=/usr/bin/python3 --system-site-package .venv  Activate virtual environment:\nsource .venv/bin/activate  Install requirements (NOTE: additionally requires modules from python-qgis):\npip install -r requirements.txt  Run Demo-DB and QGIS Server:\ncd ../qwc-docker \u0026amp;\u0026amp; docker-compose up -d qwc-postgis qwc-qgis-server  Generate service configs and permissions for Docker:\npython config_generator_cli.py ./tenantConfig-example.json all  "},{"uri":"https://qwc.sourcepole.com/","title":"QWC2 / QWC Services","tags":[],"description":"","content":"QWC2 / QWC Services QGIS Web Client 2 (QWC2) and QWC Services on the backend provide a complete Web GIS infrastructure.\nQWC2 viewer  Modern responsive viewer Optimized for QGIS server Customizable and extensible  Powerful features  Fulltext search Info templates Customizable edit forms PDF printing and reporting  Enterprise ready  Docker/Kubernetes or WSGI deployments Multi-tenant setup Custom service integration Multiple authentication backends  Explore  Overview Quickstart  Support  Community support: Github Commercial Support: Sourcepole and other companies.  "},{"uri":"https://qwc.sourcepole.com/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://qwc.sourcepole.com/tags/","title":"Tags","tags":[],"description":"","content":""}]